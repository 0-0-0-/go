// Code generated by go-bindata.
// sources:
// latest.sql
// migrations/1_initial_schema.sql
// migrations/2_index_participants_by_toid.sql
// migrations/3_use_sequence_in_history_accounts.sql
// migrations/4_add_protocol_version.sql
// migrations/5_create_trades_table.sql
// migrations/6_create_assets_table.sql
// migrations/7_modify_trades_table.sql
// DO NOT EDIT!

package schema

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _latestSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x5b\x5d\x6f\xdb\x38\x16\x7d\xcf\xaf\x20\xe6\xc5\x31\x60\x07\x76\x3a\x49\x1a\x67\x5b\xc0\x75\xd4\xa9\x51\x57\x9e\xda\xce\x76\x8a\xc1\x80\xa0\x25\xda\xe6\x56\x12\x55\x92\x4e\x93\x59\xec\x7f\x5f\xe8\xcb\xfa\x22\x45\xc9\x56\x3a\x8f\x31\xaf\x0e\xcf\xb9\xbc\xe4\x25\x2f\x99\x7e\xff\xac\xdf\x07\xbf\x53\x2e\xb6\x0c\x2f\x3f\xcf\x80\x8d\x04\x5a\x23\x8e\x81\xbd\x77\xfd\xb3\x7e\xff\x2c\x68\xbf\xdf\xbb\x3e\xb6\xc1\x86\x51\x37\x35\x78\xc4\x8c\x13\xea\x81\xdb\x8b\xeb\x8b\xab\x8c\xd5\xfa\x19\xf8\x5b\x18\x7c\x5e\x30\x39\x5b\x1a\x2b\xc0\x05\x12\xd8\xc5\x9e\x80\x82\xb8\x98\xee\x05\x78\x03\x06\x77\x61\x93\x43\xad\x6f\xe5\x5f\x2d\x87\x04\xd6\xd8\xb3\xa8\x4d\xbc\x2d\x78\x03\x3a\x0f\xab\xf7\xaf\x3b\x77\x09\x9c\x67\x23\x66\x43\x8b\x7a\x1b\xca\x5c\xe2\x6d\x21\x17\x8c\x78\x5b\x0e\xde\x00\xea\xc5\x18\x3b\x6c\x7d\x83\x9b\xbd\x67\x09\x42\x3d\xb8\xa6\x36\xc1\x41\xfb\x06\x39\x1c\xe7\xba\x71\x89\x07\x5d\xcc\x39\xda\x86\x06\x3f\x10\xf3\x88\xb7\xbd\x8b\xb9\x63\xc4\xac\x1d\xf4\x91\xd8\x81\x37\xc0\xdf\xaf\x1d\x62\xf5\x02\xb1\x16\x12\xc8\xa1\x89\x99\x8d\x37\x68\xef\x08\x28\xd0\xda\xc1\xdc\x47\x16\x0e\x48\x77\x0a\xad\x3f\x88\xd8\x41\x4a\xec\x0c\x8f\xb3\x68\x34\x4c\xe4\xe2\x11\xd8\x52\xe6\x43\x97\x6c\x19\x0a\x38\xf3\x3b\xb0\x7a\xf6\xf1\x08\xac\xc6\xef\x66\xc6\x1d\x58\x5a\x3b\xec\xa2\x51\x4c\xe2\x0e\xcc\x7f\x78\x98\x8d\x40\x3f\x1c\xb1\xc9\xc2\x18\xaf\x8c\xc8\xb4\x88\x03\xce\xcf\x00\x00\x80\xd8\x40\xe0\x27\x01\xcc\xf9\x0a\x98\x0f\xb3\x59\x2f\xfc\x15\xf9\xbe\x43\xb0\x0d\x91\x00\xc1\x38\x70\x81\x5c\x1f\x04\x44\xc3\x3f\xc1\xdf\xd4\xc3\x67\xdd\xbb\xb3\x3c\xd1\x1d\xe1\x82\xb2\x67\x88\x2c\x8b\xee\x3d\xc1\x21\xb1\x21\xc7\xdf\x13\xc2\x4b\xe3\xf3\x83\x61\x4e\x6a\x72\x4e\xac\x55\xa8\x21\xcd\xe5\x6a\xbc\x58\x81\x2f\xd3\xd5\x07\x30\x0c\x7f\x98\x9a\x93\x85\xf1\xc9\x30\x57\xe0\xdd\xd7\xf8\x27\x73\x0e\x3e\x4d\xcd\x7f\x8f\x67\x0f\xc6\xe1\xef\xf1\x1f\xe9\xdf\x93\xf1\xe4\x83\x01\x86\x3a\x31\x47\xbb\xbd\x08\x94\xfa\x7d\x4d\xb6\xc4\x13\xe0\xde\x78\x3f\x7e\x98\xad\x80\x87\x9f\xc4\x23\x72\xce\x3b\x0a\xc5\x9d\xd1\x88\xe1\xad\xe5\x20\xce\xbb\xc5\xe1\xb2\x6d\x86\x39\x07\xd6\x0e\x31\x64\x09\xcc\xc0\x23\x62\xcf\xc4\xdb\x9e\x5f\xff\xda\xad\x18\x28\xce\x71\x1b\xca\x42\x98\x54\x17\xf1\x04\xde\x62\x56\xe4\x18\x58\x41\xf1\xec\x63\x39\x4d\xa9\xb9\x45\x6d\x99\xf9\xf0\x52\x6e\x4e\x38\xdf\x63\x26\xf9\xe0\xea\x3a\xfd\x40\xe7\x8f\x96\xc3\x36\x8b\xf9\xd3\x82\xb6\x4a\x08\x98\x7f\x31\x8d\x7b\xf0\xee\xab\x46\xd1\x78\xb6\x32\x16\x1a\x41\x07\xac\x42\xf3\x05\xb1\x55\xdc\xf0\x66\x83\xad\x16\xa2\x2e\xc6\x89\xc3\xae\x30\x67\x60\x3a\xbd\xf2\x71\x92\xd8\x51\x1f\x47\xeb\xa0\xd2\xf2\x17\xca\x6c\xcc\x7e\x51\x44\x73\x18\xc7\xf2\x26\x1b\x0b\x44\x1c\x0e\xfe\xc3\xa9\xb7\x56\x07\x9b\x83\xed\x2d\x66\xa7\xfb\x21\xc6\x89\xfd\xc0\xf1\xf7\x3d\xf6\x2c\x15\xb7\xc8\x18\xee\x10\xdf\xd5\x9a\x85\x3e\xc3\x8f\x84\xee\x39\xd4\x7e\x18\xbb\x85\x21\x8f\xa3\x28\xb9\x86\x03\x71\xe0\x91\xac\x72\x83\x42\x0f\xe9\x40\xd4\xb3\xb7\x1c\xca\x65\x89\x29\xd8\x2a\x1c\x72\x53\xf1\x1b\x86\x91\xd0\x7e\x14\xd9\xee\x7d\xbb\xb6\xed\x21\x74\xe2\x3f\x5d\x9f\x32\x81\x19\x4c\x76\x3b\x45\x2d\xc3\x62\x10\x51\x81\x1c\x68\x51\xe2\x71\x79\x0c\x6e\x30\x86\x3e\xa5\x8e\xbc\x35\xd8\x7c\xc1\x0d\x56\x8d\x75\xd8\xcc\x30\xc7\xec\x51\x65\xe2\xa2\x27\x28\x9e\x60\xb0\x74\x72\xf2\xb7\xca\xca\x67\x54\x50\x8b\x3a\x4a\x5d\x83\x1a\x6b\x6b\x3a\xce\x3e\x62\x82\x58\xc4\x47\x6d\x64\x55\x39\xac\x2e\x17\xd5\x5f\x05\xf4\xeb\x4a\x53\xc9\xed\xa6\x97\xca\x3e\x7e\x56\xba\x69\x24\xf4\xc4\xf4\x53\xd9\x57\x39\x1d\xc9\xcd\x2b\xd2\xd3\xe1\x83\x16\x63\xb3\xbc\xe7\x2b\xac\x03\x99\x55\x53\x65\x13\xee\xc8\xad\x48\x4a\x98\x99\x4e\x4c\x4c\xd1\x4f\x9c\xee\x99\x85\x93\xe8\x56\xa4\x84\x64\x9a\x77\x3a\xa3\x51\xc9\xa2\xc6\x3c\x10\x0c\xd9\xf8\x74\x77\x46\x30\x85\x7c\x7f\x6a\x1e\x8f\xf3\xda\x31\x59\x85\x6e\x36\x98\x29\xbb\x0d\x57\xdf\x78\x57\x5a\x65\xf2\x48\x9d\xbd\x8b\xe5\x06\xe1\xa0\x60\xa6\x81\x49\xac\xaa\x90\xc2\xae\x08\x87\x1c\x3b\x0e\x66\x60\x4d\xa9\x83\x91\x17\xb5\x4d\xe6\xe6\x72\xb5\x18\x4f\xcd\x55\xc1\xd5\x30\x43\x10\x86\x27\x67\x30\xf9\x60\x4c\x3e\x82\xf3\xf3\x2c\xf5\xb7\x60\xd0\xed\xea\xa0\x24\x9f\x1f\x54\xfd\xab\x24\xb4\x06\x5e\x4e\x74\x01\xbe\xe0\x91\x90\x60\x65\x78\x1e\x66\x5f\xab\xb9\x49\x05\x5c\x37\x3b\xd5\x59\x16\x4e\xc9\x4f\x2a\x7e\xed\x66\x28\x4d\x2f\x3f\x2b\x47\x35\x14\x7b\x62\x96\xd2\xf4\x56\xce\x53\xaa\x0f\x2a\x32\x55\xe6\x93\x56\x63\x35\x89\xcf\x2c\xa5\xda\x07\x86\x78\x3d\xd5\x1c\x43\xea\x26\xb3\xea\xbc\x24\xb5\x4d\xbb\x56\xef\xa8\x91\x72\xea\xa9\x4e\x23\xff\xc8\x79\x42\x3c\x41\xec\x3d\x62\x87\xfa\x58\x56\xa3\x13\x4f\xc1\xee\x7e\xef\x08\x45\xa3\x8b\x05\x52\x34\x05\x5e\x50\x35\x73\xb2\xf5\x90\xd8\x33\x2c\x2b\x27\xdd\x5e\x77\xff\xfc\x2b\xdd\x10\xfc\xf7\x7f\xb2\x2d\xc1\x9f\x7f\x15\x8f\x19\xd8\xa5\x8a\xca\x4f\x8a\xe5\x51\x0f\x57\x6e\x30\x52\xac\x32\x4c\xac\x8c\xb8\x18\xae\xe9\xde\xb3\x79\x30\x72\xaf\x19\xf2\xb6\x55\x75\xca\xa8\x6e\x45\xec\x64\xf6\xc4\x5c\x6a\x4d\xf9\x68\xfa\xcc\xcd\x59\xb1\xf4\x01\xa2\xf6\xc9\x7c\xf6\xf0\xc9\x0c\x86\x74\x69\xac\x2a\x6a\x7c\xd9\x6a\x4a\xb6\xc2\xd7\x6c\xaf\xdd\x9e\x08\x05\x7e\x23\x51\x95\x7b\xf4\x3a\x22\x95\x99\xb3\x35\x99\xca\x1e\x1a\x09\xd5\x2c\xf3\x72\xa9\xf7\x48\x20\xb0\xa1\xac\x46\x79\x1f\xdc\x8f\x57\x63\x8d\xc4\xa9\xb9\x34\x16\x2b\x30\x35\x57\xf3\x52\x89\x3f\xcc\x8e\x4b\x70\xde\x19\x42\xe2\x11\x41\x90\x03\x79\x88\x75\xc1\xbf\x3b\x9d\x1e\xe8\x5c\x0e\x86\x37\xfd\xe1\xa0\x3f\xbc\x05\xc3\xeb\xd1\xe5\x70\x34\x18\x5e\xbc\xba\xba\xbe\xbc\xbc\xea\x0f\x6e\x3a\xdd\xbb\x7a\xe8\x97\x90\x78\x36\x7e\xca\xbb\x60\xfd\x0c\x05\x25\x76\x65\x4f\xd7\x83\x9b\x46\x1d\xbd\x82\x7b\x8e\x0f\x2b\x3c\x24\x1e\x2c\xd6\xca\xab\xbb\x7b\x75\x35\xbc\x6e\xd2\xdf\xaf\x10\xd9\x36\x2c\xd6\x3f\xaa\xfb\xb8\x1d\x0c\x87\x4d\xfa\xb8\x82\x51\x3a\x49\x76\xb6\xe1\x65\x51\x65\x17\x37\x57\x83\xcb\x9b\x26\x5d\x5c\x27\x5d\xc4\xab\x4d\x8d\x2e\x6e\x7f\x1d\xbe\x6e\xd2\xc5\x0d\x74\xa9\x4d\x36\xcf\xf5\x55\xbc\xbe\xb9\xbd\x49\x06\x43\x31\x35\x2a\xef\x60\xea\xcc\x8d\xa3\xee\xa7\x82\x29\xaf\xc1\x5d\x1a\x33\x63\xb2\xca\x5c\xf8\x5d\x70\x5c\x7d\x77\xd3\x03\xc3\x5e\x74\xbb\x57\x43\x6e\xf9\x5a\xe6\x04\xb1\x95\x57\x01\xad\x48\xcd\xa5\xb0\x26\x42\x65\x57\x01\x4d\x94\x2a\x60\x65\x95\xf5\x16\x60\x6b\x54\x30\x8f\x1f\xa6\x66\x25\xb4\x36\x86\xad\x3a\x49\x37\x19\x46\x45\xc9\xac\x05\x97\x4b\x2a\x47\xed\xa0\xea\x0f\xfc\xc7\x0f\x65\xd3\x93\x66\x1b\x83\xa9\xdb\x88\x34\x19\x4e\xe5\xb9\xb2\xb9\x4b\x8a\xe9\xa2\xf0\x37\xf4\xbf\xe1\xe7\xa4\x8b\xb4\xd6\xd3\x74\x4f\x57\x40\x0d\x8f\x02\xe3\xfb\xfb\x6c\xf5\x48\xd6\x31\xf8\x7d\x31\xfd\x34\x5e\x7c\x05\x1f\x8d\xaf\xe0\x9c\xd8\xba\x73\x42\x61\xbd\x4b\x2f\xa8\x61\x7a\xb5\x0d\xb3\xf7\xd0\xb0\x15\x75\xf9\x6e\x65\xe2\x8e\x22\x06\x1e\xcc\xe9\xe7\x07\x03\x9c\xa7\xe6\xbd\xcc\x1d\x7d\x2f\x77\xa3\xde\xd0\x35\xed\x0c\x6b\x63\xe1\x8d\x06\x55\x71\xce\xd1\xac\x8e\xed\x2a\x93\x77\x52\xa5\xb4\x82\x56\x6d\xe5\xca\xa3\x8f\x76\x31\x69\x57\xbd\xaa\x9b\x2a\xfd\x95\xd4\xb4\x1e\x88\x42\x7a\xfd\x1c\x47\x75\x22\x65\x6a\xde\x1b\x7f\xd4\x2b\x9a\x85\xa6\x45\x1c\x30\x37\x8b\x13\xe2\x61\x39\x35\x7f\x03\x6b\xc1\x30\x4e\x66\x98\x62\x26\xad\x0f\x7b\xc5\xa3\xe9\xa4\x10\x59\x26\xb9\x8a\x5e\x9e\x4f\x64\xdc\x2b\x95\xcc\x64\xe4\x76\x88\xef\x4e\x61\x16\x56\x0e\x6b\xd1\x2a\xd6\x1b\x65\x6c\xa2\xad\xdd\x29\x7c\x22\x84\x7a\x8c\x0a\xc5\xcc\x5e\xb9\x6e\x29\x9d\x64\x10\x07\xb1\x11\xb6\x1f\xc1\x34\x5e\x97\x23\xc2\x05\xb8\x2c\xed\xe4\xfd\x4b\x8e\xb1\xec\x5a\xac\x97\x5c\x81\xa9\xc8\xa6\x45\x95\x13\x69\x12\xbb\x36\xc1\xf4\xbe\xa2\x27\xbd\xcb\xd3\x90\xa6\x3e\xf4\xdb\xe2\x1d\x63\x65\xa9\x2b\x92\xc3\x51\x4a\xe4\x02\xc4\x53\x7b\x02\x62\x2c\x45\x4c\x1f\x29\x21\x7f\xf9\x54\x16\x41\xfd\x20\x2a\x77\xf4\x28\x0d\x31\xf9\x14\xe3\x58\xe7\x57\x3b\xfa\xf0\x6c\x29\x58\xaa\x4f\xf7\x75\x1e\x2e\x4b\x39\x79\x83\x95\xe3\x28\x67\x94\xf5\x6b\x5b\xb4\x4a\x98\xf5\x96\x37\x19\x41\x11\x0d\x89\x38\x65\x58\x53\x8c\xe3\x43\x52\x17\x7e\x82\xd9\xe1\xaa\xb8\xd9\x9c\x90\x0e\x72\x28\x05\xae\x36\x2e\x30\x4b\xae\xfb\xe5\x5c\x92\x2b\x67\x87\xd2\x6f\x7b\xff\x34\x46\x79\x2c\x1d\xaf\xd2\xdd\xb9\x94\x9f\x8f\x08\x0b\x9f\xd4\xb7\xc2\xb0\x88\xa6\xe3\x98\xbb\xef\xef\x95\xae\xfb\x7b\xa5\x67\x18\x0a\x11\x2d\xcc\x96\x18\x47\xc7\xb8\x61\x4e\x0a\x50\x5b\xf3\x6e\x03\xc7\x6a\xfd\x16\x15\xe6\x4b\x55\x49\xea\xc1\xf8\xcd\xf8\xa9\x0e\xd5\x76\x90\xdb\x1d\x27\x6f\xe0\xf3\xfb\xd1\xc8\xb0\x01\xf7\xd3\xe3\xa0\x0a\x5b\xcf\x58\x32\xcb\xf2\x80\xf1\xde\x27\xc0\x0b\x4e\xd3\x47\xc7\x43\x25\xaa\x76\xb3\x15\x18\x69\x88\xc6\x99\x2b\x80\x3c\x04\x51\x4b\x6c\x65\xd0\xda\xa4\x59\x37\x92\x33\xe0\x6d\x07\x43\x0e\xfa\x98\x2c\xaf\x86\x2b\x3c\x10\x6e\xdf\xd1\xa5\x27\xc8\x5a\xfa\x85\x0f\xea\x8b\xc9\xbc\x08\x7f\x31\xff\x67\x5f\x9d\xeb\x94\x64\x6c\xeb\x8b\x90\xbd\x6f\x7f\x31\x35\xd2\xc7\xf4\x3a\x59\xb2\x8f\xea\xeb\x4b\x8e\xae\x2f\xa6\xe9\xf0\xda\x46\xa7\x43\x59\x63\xc8\x43\xa7\x77\x09\x2f\x31\xb5\x8b\xe8\xd2\x63\x47\xd3\x09\x9e\x07\xcd\x6f\x5c\x5b\x9a\xe1\x55\x5d\xd4\xd1\xa0\xd9\x4d\x57\x76\xd6\x5e\xfa\x2a\x03\xd7\xe2\xae\x4f\x62\xd9\x23\xce\x4b\x84\x4d\x19\xff\xe8\x03\x56\xb8\x89\x3b\x24\xf2\xa4\xae\x03\xd7\x94\x7e\x3b\xda\xcb\x15\x98\xda\x2d\xc2\xf9\x79\xf2\x2a\xbc\xff\xf6\x2d\xe8\x70\xea\xd8\x99\x5b\x83\xce\x68\x24\xf0\x93\xe8\x76\x7b\x40\x6d\x68\x51\xbb\x9e\x61\x54\x01\x55\x9b\xae\xe9\x7e\xbb\x13\xb5\xba\xcf\x99\x56\x13\xc8\x99\x16\x28\x74\xc1\x97\x0f\xc6\xc2\x88\x82\x0c\xbc\x01\xaf\x5e\x69\x1e\xb1\x4b\x5f\x48\x27\xc7\x18\xb8\xc9\xd4\xc7\xdf\x7f\x6c\xa7\x44\x6e\x63\x5d\x41\x5c\xce\x03\xbc\x9f\x2f\x8c\xe9\x6f\x66\x54\x0c\xcf\xb5\x77\xc1\xc2\x78\x6f\x2c\x0c\x73\x62\x2c\x0b\x85\x6b\xcd\xbd\x81\xc4\x03\xc5\xb3\xdc\x3f\xe8\x04\x29\x95\xbc\x1f\x4a\x87\xe5\xba\xae\x50\xfd\x63\x3c\xb0\xa8\xeb\x3b\x58\xe0\x50\xc3\xff\x03\x00\x00\xff\xff\x99\x5d\x29\x18\x45\x3f\x00\x00")

func latestSqlBytes() ([]byte, error) {
	return bindataRead(
		_latestSql,
		"latest.sql",
	)
}

func latestSql() (*asset, error) {
	bytes, err := latestSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "latest.sql", size: 16197, mode: os.FileMode(420), modTime: time.Unix(1508455261, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _migrations1_initial_schemaSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x5a\x5f\x6f\xdb\xc8\x11\x7f\xf7\xa7\x18\xdc\x8b\x6c\xd4\x6a\x2f\xb8\xe2\x70\x95\xe1\x03\x14\x99\x69\x84\xca\x54\x22\x51\x4d\x82\xc3\x61\xb1\x22\x47\xd4\xd6\xe4\x2e\xb3\xbb\x74\xa4\x2b\xfa\xdd\x0b\x52\x24\xc5\xff\xa4\x1c\xc9\xf7\x28\xee\xec\xcc\xfc\x66\x66\x7f\x33\x5c\x6a\x38\x84\xbf\xf8\xcc\x95\x54\x23\xac\x82\xab\xe1\xf0\x6a\x38\x84\x0f\x42\x69\x57\xe2\xf2\xe3\x0c\x1c\xaa\xe9\x9a\x2a\x04\x27\xf4\xe3\xe5\xab\xa5\x61\x81\xd2\x54\xa3\x8f\x5c\x13\xcd\x7c\x14\xa1\x86\x7b\xf8\xf1\x2e\x5e\xf2\x84\xfd\x54\x7d\x6a\x7b\x2c\x92\x46\x6e\x0b\x87\x71\x17\xee\x61\xb0\xb2\xde\xfd\x32\xb8\x4b\xd5\x71\x87\x4a\x87\xd8\x82\x6f\x84\xf4\x19\x77\x89\xd2\x92\x71\x57\xc1\x3d\x08\x9e\xe8\xd8\xa2\xfd\x44\x36\x21\xb7\x35\x13\x9c\xac\x85\xc3\x30\x5a\xdf\x50\x4f\x61\xc1\x8c\xcf\x38\xf1\x51\x29\xea\xc6\x02\xdf\xa8\xe4\x8c\xbb\x77\x57\x09\x3c\x93\xfa\x38\x82\xc0\x0b\x5c\xf5\xd5\xbb\x03\x6b\x1f\xe0\x08\x8c\xcf\x96\x61\x2e\xa7\x73\xf3\x0e\x96\xf6\x16\x7d\x3a\x82\xe1\x1d\xcc\xbf\x71\x94\x23\x18\xc6\xc8\x27\x0b\x63\x6c\x19\x47\x49\x98\xbe\x03\x73\x6e\x81\xf1\x79\xba\xb4\x96\xa9\x42\xf8\x34\xb5\xde\xc3\x72\xf2\xde\x78\x1c\x43\xe0\x12\x9b\x6a\xea\x89\xc8\x7a\xc1\xfc\x51\x4b\xc9\x91\xc9\xfc\xf1\xd1\x30\xad\x16\x37\x0e\x02\x30\x37\xab\x4a\x60\xba\x84\xc1\x87\xd9\xdf\x02\x37\x4a\x5e\x20\x85\x8d\x4e\x28\xa9\x07\x1e\xe5\x6e\x48\x5d\x1c\x94\xfd\xd8\x2a\x2d\x24\x9e\x2f\x0a\x07\x7d\xc5\x20\x84\x6b\x8f\xd9\xcd\x01\x28\xba\xf0\x32\xfc\x89\xd9\x08\x7e\x54\xb2\xa0\xf7\x01\xc2\x46\x48\x88\x9e\x47\x15\xa7\x50\x2b\x10\x1b\xb8\x7e\xc2\xfd\x2d\x3c\x53\x2f\xc4\x1b\x08\x28\x93\x2a\x0e\x49\x5c\x86\x48\xa5\xbd\x25\x01\xd5\x5b\xb8\x4f\xbc\xbe\x2d\xa6\x30\x12\x73\x70\x43\x43\x4f\x13\x4d\xd7\x1e\xaa\x80\xda\x18\x95\xf3\xa0\xb4\xfa\x8d\xe9\x2d\x11\xcc\xc9\x55\x68\x31\xee\x2c\xf2\x6c\x4f\xa8\x6d\x8b\x90\x6b\x95\xc2\xb7\xc6\x6f\x67\xc6\x11\x7c\x12\xbb\x2c\x02\x77\x60\x65\x66\x47\xf9\x7c\xc4\xfb\x2a\x5a\xe1\xfa\x0a\x00\x80\x39\xb0\x66\x2e\xe3\x3a\xce\x94\xb9\x9a\xcd\x6e\xe3\xe7\xd4\x71\x24\x2a\x05\xf6\x96\x4a\x6a\x6b\x94\xf0\x4c\xe5\x9e\x71\xf7\xfa\xe7\xbf\xdf\x5c\xdd\x54\x6a\x25\xd1\x8e\x9b\x0d\xda\xe7\x76\x39\x51\x9a\x78\x5c\x02\x42\x9a\x10\xa4\x72\x22\x40\x49\x63\x5e\x68\x92\xfc\x41\x48\x07\xe5\x0f\xc0\xb8\x46\x17\x65\x69\x35\xae\x97\xfa\x25\x07\x35\x65\x9e\x82\xff\x28\xc1\xd7\xcd\x41\xf1\xd0\x71\x51\x9e\x39\x28\x89\xd2\x24\x28\x0a\xbf\x86\xc8\xed\x26\x47\x0f\xc2\x64\x4b\xd5\xb6\x3e\xa3\x25\xf9\x40\xe2\x33\x13\xa1\x22\x9d\x1b\x93\x18\x49\xca\x15\x3d\xb0\x6f\x9c\x95\xcc\x8f\x07\xe3\xdd\x78\x35\xb3\xe0\xc7\x92\x85\x63\x56\xfa\xc9\xdb\x9e\x50\xe8\x10\xaa\x21\xea\x20\x4a\x53\x3f\x80\xe8\x20\x45\xbd\x24\x7a\x02\x7f\x08\x8e\xe5\x3d\x12\xa9\xee\xdc\x74\x90\x0d\x03\xa7\xb7\x6c\x56\x47\xc9\x4f\x3f\x10\x52\xa3\x24\xcf\x28\x15\x13\xbc\x82\xe5\x4d\xb9\xa2\x84\xa6\x1e\xb1\x05\xe3\xaa\xbe\x20\x37\x88\x24\x10\xc2\xab\x5f\x8d\x9a\x2e\xd9\x60\x53\xae\xe3\x65\x89\x0a\xe5\x73\x93\x88\x4f\x77\x44\xef\x88\x42\x4d\x14\xfb\xa3\x2a\xd5\x5c\xca\xc7\xb4\x05\x54\x6a\x66\xb3\x80\x9e\x9d\xa1\xea\x6d\x1c\xf9\xaa\x1e\x53\xff\xe3\xde\x4d\x20\xa7\xe2\x27\xcc\x21\x0a\xbf\xa6\x61\x58\x1a\x1f\x57\x86\x39\x69\x89\x44\x1e\x7c\x2a\xdd\xcf\x46\x8c\x60\x69\x8d\x17\xd6\xa1\x91\xbe\x89\x1f\x4c\xcd\xc9\xc2\x88\x5b\xdf\xdb\x2f\xc9\x23\x73\x0e\x8f\x53\xf3\xdf\xe3\xd9\xca\xc8\x7e\x8f\x3f\x1f\x7f\x4f\xc6\x93\xf7\x06\xbc\x39\x0b\x50\x98\x7f\x32\x8d\x07\x78\xfb\xa5\x03\xf1\x78\x66\x19\x8b\x13\x01\x67\xba\x3b\xc4\xff\xca\x9c\x4e\x2c\x97\x2a\xd4\xae\x66\x9a\xa7\xc7\xc6\x86\x1b\x04\x1e\xb3\x0f\xb8\xe2\x7e\xf4\x9d\xed\xe8\xf0\x48\x89\x50\xda\x98\x96\x7a\x03\xf7\xa7\x3c\x35\x18\x8c\x46\x15\x89\x1e\x87\x22\x0f\xef\x72\xb4\xd0\x64\x25\x8e\x7d\x03\x2d\xd4\xed\xad\x4f\xc0\xf7\x90\x42\x93\x67\xe7\xa5\x85\x0e\x2b\xaf\x45\x0c\x27\x82\xfd\x4e\x6a\xe8\xb0\x56\x25\x87\xa6\x0d\x2d\xf4\x90\xdb\x72\xb9\x92\x4d\x29\x22\xef\x5f\xef\x71\x2c\x99\xc2\x3a\x86\xbc\xbe\x0c\xd2\x4e\x06\xb5\xb2\x47\xd3\xcd\xf3\x0a\x6d\x6c\xcd\x4d\xb3\xde\x9f\x32\xad\xe9\x1d\x41\xfe\x8c\x9e\x08\x10\x34\xee\x2a\x54\xbd\x8b\x66\xa7\xd0\xd3\x0d\x8b\x3e\x46\xaf\x90\xb5\x4b\x51\x14\x9a\x96\x15\x73\x39\xd5\xa1\xc4\xba\x37\xaa\x7f\xfc\x7c\xf3\xdb\xef\x47\x16\xfe\xef\xff\xea\x78\xf8\xb7\xdf\xcb\x43\x1c\xfa\x82\xc4\xdd\xa0\xca\xd9\x99\x2e\x2e\x38\xb6\xb2\xfa\x51\x57\x55\x4d\x82\x8c\xf9\x48\xd6\x22\xe4\x8e\x8a\x32\xf7\x8b\xa4\xdc\xc5\x98\x0c\xf3\x87\x89\x39\xe9\xd1\x49\x6c\xf7\x3a\xef\x87\xe3\x32\x37\x67\x5d\xdd\x1d\x0e\xf2\x93\xf9\x6c\xf5\x68\x46\x29\x8d\x5e\xa8\x53\x94\x1c\x77\xfa\x99\x7a\xd7\x83\x5e\x03\xc5\x60\x34\x92\xe8\xda\x1e\x55\xaa\xc2\xe8\x67\x43\xd1\xd8\xac\x4e\xc2\xd1\xc1\x7e\x6d\x48\x3a\x42\x11\x3c\xe1\xfe\x78\xad\x62\x2e\xad\xc5\x78\x6a\xb6\xa0\xad\x12\xde\x89\x09\x8c\x4b\x69\xfc\xf0\x90\xb3\xd6\xc7\x47\xf8\xb0\x98\x3e\x8e\x17\x5f\xe0\x5f\xc6\x17\xb8\x66\xce\xe9\x3d\xf8\x82\x48\x9b\x6c\xb6\x61\x6d\xf5\xb3\x13\xed\x3a\x1b\x50\x52\x48\x53\xf3\xc1\xf8\xfc\x82\x46\x15\xef\xcb\xe9\x83\xb9\x59\xdf\xb6\x56\xcb\xa9\xf9\x4f\x58\x6b\x89\x08\xd7\x89\xf0\x6d\xa5\x2f\xd4\x79\x1a\xb5\xb7\xb3\xb9\x19\xf7\xca\x5e\x3e\x96\x3b\x6c\x9d\x6b\x87\x86\x7a\x36\xe7\x0e\xea\xfa\xb9\x57\xea\xe5\xb7\xd5\xb6\x5d\x5b\xe3\x04\xc9\x7a\x7f\x58\xff\x5e\xb7\x57\xe6\xf4\xe3\x2a\xf5\xbe\xa4\x3b\x8f\x21\xbd\x76\x2b\xb8\x5f\xf7\x9a\x7d\x9b\xde\xa0\x35\x79\x7e\xa4\xd5\x73\xfa\xcc\x9c\xde\xde\x1e\xa7\xfa\xdb\xda\x8b\x82\x0e\x04\x22\x20\xc1\x45\x40\x24\x8a\xf3\x38\x1a\xfa\xdf\x8b\x60\x55\xd1\x64\x37\x7a\xeb\xfd\xd9\x01\x15\x75\xe7\x31\xa5\x77\x95\x05\x10\xf5\xee\xe5\x4f\xef\x45\x7c\xac\x18\xe8\x77\x6c\x6b\xbc\x65\xdc\xc1\x1d\x29\xdf\xab\x13\xc1\x49\x72\x79\x7e\x56\xd7\x3b\xad\xe5\x71\x64\x97\xfc\x45\xf6\x3e\x08\x9e\x00\xe4\xcc\xe1\x6f\x33\xd4\xed\x7e\x67\x0a\x12\x0a\x88\xf4\x45\x73\xf1\x79\xe8\xbd\xd5\x44\x27\x01\x45\x42\x1d\x5e\x27\x87\x23\x52\x99\x5d\x72\x5f\xc2\xf5\x3a\x3b\x9d\x87\x34\x93\xec\x0f\xe2\xa2\x35\x53\xb0\xf3\x12\x8a\x69\x56\x57\xba\xc5\xbf\x70\x0a\x2a\x1f\x0d\x3a\xb1\x94\x36\xf4\x47\x96\xfb\x86\xf3\x3a\x99\xc9\x7f\x34\xea\x82\x95\x93\xed\x8f\xa8\xee\xf3\xd4\xeb\x40\xab\xfd\x30\xd6\x85\xb1\x6e\x53\x7f\xb0\xe9\xa4\xf8\x3a\x00\xb3\x8b\x9e\x2e\x50\x8d\x93\x7f\x51\xf5\xf1\x8e\xfc\xe2\xdc\x50\x36\x55\x3b\x55\x9d\xca\x10\x45\xa5\xc5\x7b\xe4\x4b\x50\x44\x9b\xbd\x3e\x80\x8a\x3b\x4e\x03\x77\xa1\x9e\x59\xb5\xd2\x0b\x48\x5d\xe7\x8c\x87\x66\xbd\xbb\xd0\x34\x9e\x28\x6e\x18\x08\x5f\x38\x8f\x57\x13\xd2\x9c\x8f\xfc\xf8\x79\xf1\xe3\x52\x35\xf6\xe2\x49\x58\x4b\xea\x60\x36\x1b\xa5\xef\x92\x64\x2d\xc4\xd3\x79\x0a\xaa\xc5\x40\xe7\x08\x76\x7d\x9d\x7e\x17\x1b\xfe\xfa\x2b\x0c\x94\xf0\x1c\x42\x95\x42\x1d\x97\xe2\x60\x34\xd2\xb8\xd3\x37\x37\xb7\xd0\x2c\x68\x0b\xa7\x9f\x20\x53\x2a\x44\xd9\x2c\xba\x16\xa1\xbb\xd5\xbd\xcc\x17\x44\xdb\x1d\x28\x88\x96\x5c\xb8\x81\x4f\xef\x8d\x85\x71\x38\x4f\x70\x0f\x3f\xfd\x94\xcb\x5e\xd3\xbf\xf9\xc0\x16\x7e\xe0\xa1\xc6\x38\x13\xf9\x3f\x02\x3e\x88\x6f\xfc\xca\x91\x22\x80\xf8\x3f\x4e\xf5\xe5\x62\x53\x65\x53\x07\xef\x3a\x04\x8b\x07\xaa\x6d\x53\x8e\x23\x7a\x89\xf5\xd7\x9c\xb6\xb6\x36\x99\xb4\xaa\xda\x64\xb2\x37\x96\x4c\xe8\xff\x01\x00\x00\xff\xff\x5d\xb2\x1f\x7d\x3f\x29\x00\x00")

func migrations1_initial_schemaSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations1_initial_schemaSql,
		"migrations/1_initial_schema.sql",
	)
}

func migrations1_initial_schemaSql() (*asset, error) {
	bytes, err := migrations1_initial_schemaSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/1_initial_schema.sql", size: 10559, mode: os.FileMode(420), modTime: time.Unix(1508345986, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _migrations2_index_participants_by_toidSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x8f\xb1\xca\xc2\x50\x0c\x46\xf7\x3c\x45\xc6\xff\x47\xfa\x04\x9d\xc4\x16\xe9\xd2\x4a\xb5\xe0\x76\x49\xdb\x8b\xcd\xe0\xcd\x25\x37\x20\x7d\x7b\x41\x07\x5b\xbb\xb8\x86\x8f\x73\x72\xb2\x0c\x77\x77\xbe\x29\x99\xc7\x2e\x02\x1c\xda\x72\x7f\x29\xb1\xaa\x8b\xf2\x8a\x93\x44\xd7\xcf\x6e\x12\x1e\xb1\xa9\x71\xe2\x64\xa2\xb3\x93\xe8\x95\x8c\x25\xb8\x48\x6a\x3c\x70\xa4\x60\x09\xbb\x73\x55\x1f\xb1\x37\xf5\x1e\xff\xb6\x5b\x1e\xff\xf3\x2f\xbc\xbd\xf1\xb6\xc6\x9b\x52\x48\x34\xfc\x28\x58\xae\x5f\x0a\x58\x26\x15\xf2\x08\x00\x45\xdb\x9c\xb6\x49\xf9\xea\xfe\xf9\x25\x87\x67\x00\x00\x00\xff\xff\x33\xec\x54\x7a\x15\x01\x00\x00")

func migrations2_index_participants_by_toidSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations2_index_participants_by_toidSql,
		"migrations/2_index_participants_by_toid.sql",
	)
}

func migrations2_index_participants_by_toidSql() (*asset, error) {
	bytes, err := migrations2_index_participants_by_toidSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/2_index_participants_by_toid.sql", size: 277, mode: os.FileMode(420), modTime: time.Unix(1508345986, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _migrations3_use_sequence_in_history_accountsSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x91\x4d\x6b\xb3\x40\x14\x85\xf7\xf3\x2b\xce\x2e\xca\xfb\x66\x91\x6d\x5c\x4d\xc6\x1b\x22\x8c\x63\x3b\x5e\xdb\x64\x25\xa2\x43\x3a\x90\x6a\xeb\xd8\xaf\x7f\x5f\x48\xd3\x0f\x08\x6d\xa1\xcb\x73\x78\xe0\x39\xdc\x3b\x9f\xe3\xdf\xad\xdf\x8f\xcd\xe4\x50\xdd\x09\x65\x49\x32\xa1\xa4\xcb\x8a\x8c\x22\xdc\xf8\x30\x0d\xe3\x4b\xdd\xb4\xed\xf0\xd0\x4f\xa1\xf6\x5d\x1d\xdc\xbd\x00\x80\x92\xa5\x65\x5c\x67\xbc\xc1\xe2\x58\x64\x46\x59\xca\xc9\x30\x56\xbb\x53\x65\x0a\xe4\x99\xb9\x92\xba\xa2\x8f\x2c\xb7\x9f\x59\x49\xb5\x21\x2c\x12\x51\x92\x26\xc5\x08\x6e\x7a\x6c\x0e\xd1\xec\x1b\xef\xec\x3f\xa2\x13\x99\xcb\x6d\xe4\xbb\x18\x6b\x5b\xe4\x67\x33\xe3\x38\x11\x52\x33\x59\xb0\x5c\x69\x42\x61\xf4\xee\x0c\xc2\x1b\xa1\x0a\x5d\xe5\x06\xbe\x43\x49\x8c\x94\xd6\xb2\xd2\x8c\xde\x3d\xff\xbc\x64\xb9\x1c\xdd\xbe\x3d\x34\x21\xc4\x89\x10\x5f\xcf\x98\x0e\x4f\xfd\x1f\xec\xa9\x2d\x2e\xde\xf5\x89\x38\xa6\xdf\xde\x90\x88\xd7\x00\x00\x00\xff\xff\x55\xe2\xdd\x2c\xbf\x01\x00\x00")

func migrations3_use_sequence_in_history_accountsSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations3_use_sequence_in_history_accountsSql,
		"migrations/3_use_sequence_in_history_accounts.sql",
	)
}

func migrations3_use_sequence_in_history_accountsSql() (*asset, error) {
	bytes, err := migrations3_use_sequence_in_history_accountsSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/3_use_sequence_in_history_accounts.sql", size: 447, mode: os.FileMode(420), modTime: time.Unix(1508345986, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _migrations4_add_protocol_versionSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\xcd\xb1\x0a\xc2\x30\x10\x06\xe0\x3d\x4f\xf1\xef\x52\x70\xef\x14\x4d\x9d\xce\x44\x4a\x32\x38\x15\xd1\xa3\x06\x6a\xae\x5c\x82\xe2\xdb\xbb\xba\x88\x4f\xf0\x75\x1d\x36\x8f\x3c\xeb\xa5\x31\xd2\x6a\x2c\xc5\x61\x44\xb4\x3b\x1a\x10\x3c\x9d\x71\xcf\xb5\x89\xbe\xa7\x85\x6f\x33\x6b\x85\x01\xac\x73\xd8\x07\x4a\x47\x8f\x55\xa5\xc9\x55\x96\xe9\xc9\x5a\xb3\x14\xe4\xd2\x78\x66\x85\x1b\x0e\x36\x51\xc4\x16\x3e\x44\xf8\x44\xd4\x1b\xf3\x6d\x39\x79\x95\xff\x9a\x1b\xc3\xe9\x97\xd5\x9b\x4f\x00\x00\x00\xff\xff\x83\xbb\x30\x2e\xbc\x00\x00\x00")

func migrations4_add_protocol_versionSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations4_add_protocol_versionSql,
		"migrations/4_add_protocol_version.sql",
	)
}

func migrations4_add_protocol_versionSql() (*asset, error) {
	bytes, err := migrations4_add_protocol_versionSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/4_add_protocol_version.sql", size: 188, mode: os.FileMode(420), modTime: time.Unix(1508345986, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _migrations5_create_trades_tableSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x94\x51\x6f\xaa\x40\x10\x85\xdf\xf9\x15\x13\x9f\x30\x17\x93\x7b\x6f\x5a\x5f\x4c\x9a\x58\x25\xad\xa9\xc1\xd6\x4a\xd2\x37\xb2\xb0\x23\x6c\xa2\x2c\x99\x1d\xda\xf0\xef\x1b\x68\x69\x10\x57\xad\xaf\x9c\x39\x67\x38\xbb\x5f\x76\x34\x82\x3f\x7b\x95\x92\x60\x84\xb0\x70\x66\x6b\x7f\xba\xf1\x61\x33\xbd\x5f\xfa\x90\x29\xc3\x9a\xaa\x88\x49\x48\x34\xe0\x3a\x00\xf0\xf3\x51\x17\x48\x82\x95\xce\x23\x25\x21\x56\xa9\xca\x19\x82\xd5\x06\x82\x70\xb9\xf4\x9a\xc9\x81\x26\x89\x34\x00\x95\x33\xa6\x48\x1d\xb5\x91\xf5\x76\x8b\x64\x35\x37\xb2\xc1\xdd\xee\x84\x5e\xcb\x71\x59\x9d\x75\xeb\x9d\x8c\x84\x31\xc8\x11\x57\x05\x42\x92\x09\x12\x09\x23\xc1\xbb\xa0\x4a\xe5\xa9\x3b\xbe\x19\xf6\x22\x3b\x1e\x65\x4c\x89\x64\x71\xdd\x8e\xcf\xb8\x12\x2d\x6d\x9b\xfe\xfd\xb7\x7b\xf6\xba\xcc\xb9\xff\xff\x30\x7b\xf4\x67\x4f\xe0\x76\x47\xee\xe0\xef\xf0\xbb\x57\xac\xcb\x34\xe3\x6b\x9b\x1d\xb8\xae\xe8\x76\xe0\xfb\x75\xbb\xd6\x75\xb6\xdf\xe1\x50\xdd\xd0\x19\x4e\x9c\x96\xbf\x30\x58\xbc\x84\x3e\x2c\x82\xb9\xff\x06\x19\x93\x8c\x0a\x25\x61\x15\xf4\x91\x0c\x5f\x17\xc1\x03\xc4\x4c\x88\xe0\xda\xc8\xf4\x5a\x0a\x3b\xe1\x9d\xd4\xb8\x8a\x1a\x0c\x2f\x45\xb7\xac\xda\x52\xea\x90\xfa\xb6\x2e\x65\xf4\x90\xf4\xfa\xe4\x78\xc7\x00\x9e\x5a\xf7\x75\x78\x97\x16\x1e\xb1\xe2\x1d\x5f\xa8\x67\x63\xa3\x5e\xdb\x7d\x17\xe6\xfa\x23\x77\xe6\xeb\xd5\xb3\xfd\x5d\x48\x84\x49\x84\xc4\x89\xf3\x19\x00\x00\xff\xff\x79\x87\x24\x6b\x4c\x04\x00\x00")

func migrations5_create_trades_tableSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations5_create_trades_tableSql,
		"migrations/5_create_trades_table.sql",
	)
}

func migrations5_create_trades_tableSql() (*asset, error) {
	bytes, err := migrations5_create_trades_tableSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/5_create_trades_table.sql", size: 1100, mode: os.FileMode(420), modTime: time.Unix(1508345986, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _migrations6_create_assets_tableSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x90\x3d\x4f\xc3\x30\x18\x84\x77\xff\x8a\x1b\x1d\x91\x0e\x20\xe8\x92\xc9\x34\x16\x58\x18\xa7\xb8\x31\xa2\x53\xe5\x26\x16\x78\x80\x54\xb6\x11\xca\xbf\x47\xaa\x28\xf9\x50\xe6\x7b\xf4\xbc\xef\xdd\x6a\x85\xab\x4f\xff\x1e\x6c\x72\x30\x27\xb2\xd1\x9c\xd5\x1c\x35\xbb\x97\x1c\x1f\x3e\xa6\x2e\xf4\x07\x1b\xa3\x4b\x11\x94\x00\x80\x6f\xb1\xe3\x5a\x30\x89\xad\x16\xcf\x4c\xef\xf1\xc4\xf7\xc8\xcf\xd9\x19\x3c\xa4\xfe\xe4\xf0\xca\xf4\xe6\x91\x69\xba\xbe\xcd\xa0\xaa\x1a\xca\x48\x39\x86\x9a\xae\x1d\xa0\xeb\x9b\x65\xc8\xc7\xf8\xed\xc2\x3f\x76\xb7\x9e\x63\x46\x89\x17\xc3\xe9\xa0\xcc\x47\x3f\xe4\x13\x4b\x46\xb2\x82\x5c\xfa\x09\x55\xf2\xb7\xbf\xf8\xd8\x5f\xee\x54\x6a\x5e\xd9\xec\x84\x7a\xc0\x31\x05\xe7\x40\x27\xb6\x82\x90\xf1\x74\x65\xf7\xf3\x45\x4a\x5d\x6d\x97\xa7\x6b\x6c\x6c\x6c\xeb\x8a\xdf\x00\x00\x00\xff\xff\xfb\x53\x3e\x81\x6e\x01\x00\x00")

func migrations6_create_assets_tableSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations6_create_assets_tableSql,
		"migrations/6_create_assets_table.sql",
	)
}

func migrations6_create_assets_tableSql() (*asset, error) {
	bytes, err := migrations6_create_assets_tableSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/6_create_assets_table.sql", size: 366, mode: os.FileMode(420), modTime: time.Unix(1508359159, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _migrations7_modify_trades_tableSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x54\x5d\x4f\xdb\x30\x14\x7d\xcf\xaf\xb8\xe2\xa9\xd5\x52\x04\xd3\xc6\x03\x4c\x93\xda\xe2\xb1\x68\x25\x65\x25\x95\xf6\x16\x39\xf1\x25\xb1\x70\xed\xc8\x76\xa8\xfa\xef\xa7\xa4\x04\xf2\x59\x0a\x7b\xd8\xab\x7d\xcf\x39\xf7\xda\xe7\x9e\xc9\x04\x3e\x6d\x78\xa2\xa9\x45\x58\x67\xce\x64\x02\x4c\xab\x0c\x6c\x8a\xa0\x04\x03\xab\x29\x43\x03\x96\x46\x02\x4f\x21\xcb\x2d\x50\x90\xb8\x05\x25\x11\xb8\x84\x4c\xd0\x18\x9d\xeb\xd5\xf2\x0e\x82\xe9\x6c\x41\x20\xe5\xc6\x2a\xbd\x0b\xf7\xb8\x2b\x67\xbe\x22\xd3\x80\xf4\x5e\xc2\xc8\x01\x80\x97\x43\x95\xa1\xa6\x96\x2b\x19\x72\x06\x33\xef\xc6\xf3\x03\xf0\x97\x01\xf8\xeb\xc5\xc2\x2d\x2b\x4f\x94\x66\xa8\x4f\xc0\xf3\x03\x72\x43\x56\xad\x5b\x81\x2c\x41\x1d\xc6\x42\x19\x64\x21\xb5\x10\x78\xb7\xe4\x3e\x98\xde\xde\xb5\x0a\xd5\xc3\x03\xea\x41\x91\x88\x1a\x0c\xa9\x31\x68\x7b\x4a\x60\x45\x7e\x90\x15\xf1\xe7\xe4\xfe\xa5\xef\xb2\xd6\x8c\x38\x1b\xd7\x08\x9e\x94\xc8\x37\xd8\x81\xcf\x7f\x92\xf9\x2f\x18\xd5\x4b\xbe\xc3\xd9\x33\x30\x56\xb9\xb4\xa8\xff\x49\xbc\xe2\x38\xac\xdf\xaa\x7a\x6d\xa1\x6c\x8c\x9b\xd0\xa0\x10\xa8\x61\xb6\x5c\x2e\xc8\xd4\x77\x61\x32\x81\xf3\xcb\xf2\x16\xb8\x81\xfd\xad\x0b\x67\x97\x95\xde\xeb\x69\x49\x53\xca\x8c\x9a\x2f\xf9\xad\x33\xdf\xb8\xa0\x9d\xa7\x18\x3f\x82\x4d\xa9\x85\x58\xc9\x27\x94\x85\x03\x0a\xba\x07\x25\x84\xda\x22\x3b\x75\xc6\x57\x4e\x65\xa3\xb5\xef\xfd\x5e\x13\xf0\xfc\x6b\xf2\x07\x52\xab\x59\x98\x71\x06\x4b\xbf\xed\xac\xf5\xbd\xe7\xdf\x40\x64\x35\x22\x8c\xfa\x0c\xe6\x56\x66\x1a\xbf\x58\xb4\x4e\x4a\xb9\x0e\x2d\xdf\x60\x28\x94\x7a\xcc\xb3\x41\x85\x59\xb0\x22\xa4\x39\xa8\xdb\x99\xd3\xed\x58\xb3\x57\xb4\x82\x1d\x25\xd9\x79\xcb\x3e\xc6\xe3\x27\x38\xaa\xc1\x68\x17\x96\xab\xf3\xd6\x7b\x57\xfb\x55\xfc\x9b\x53\x8f\x97\x6b\xb5\x95\x8d\x80\x91\xb8\x45\x5d\x65\x8b\x46\x2e\x8d\x2d\xea\xaa\xec\x51\x12\x4f\x87\xb3\x05\x62\x6a\x62\xca\xf0\xc3\x19\x13\xf1\x84\x4b\x3b\x90\x31\x5c\x5a\x4c\x50\x0f\x45\x47\x2f\x76\xbf\x01\x83\xd7\x51\xbe\x3b\x04\x56\x82\x3d\x7f\xa7\xdd\x65\x08\x71\x4a\x35\x8d\x8b\xdd\x7a\xa2\x7a\xc7\x65\x32\xba\xf8\x32\x1e\xc6\x70\x63\x72\xd4\x3d\xa8\xaf\x17\x07\x50\xb1\x62\x7d\x4a\xe7\x9f\xfb\x31\x9b\xc2\x75\xed\xf6\xab\x50\xa9\x97\xd4\x12\x45\xe5\x49\x6a\xdf\x3b\x58\x03\xf5\x8e\xd1\x1a\xb8\xa3\x87\xab\x50\x07\xc7\x6b\x16\x15\x03\xfe\x87\x60\xfa\xc0\x0a\xb6\x49\x0a\x8e\xe2\xab\xde\xa2\x68\xf9\xd1\x6d\xdb\xc6\xed\xba\x6f\x40\x6d\xff\x72\x6f\xe9\x75\x8c\xe2\x76\x7f\xd3\xed\x33\xc6\xf8\xea\x6f\x00\x00\x00\xff\xff\x85\xb4\x89\x2c\xc3\x08\x00\x00")

func migrations7_modify_trades_tableSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations7_modify_trades_tableSql,
		"migrations/7_modify_trades_table.sql",
	)
}

func migrations7_modify_trades_tableSql() (*asset, error) {
	bytes, err := migrations7_modify_trades_tableSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/7_modify_trades_table.sql", size: 2243, mode: os.FileMode(420), modTime: time.Unix(1508453420, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"latest.sql": latestSql,
	"migrations/1_initial_schema.sql": migrations1_initial_schemaSql,
	"migrations/2_index_participants_by_toid.sql": migrations2_index_participants_by_toidSql,
	"migrations/3_use_sequence_in_history_accounts.sql": migrations3_use_sequence_in_history_accountsSql,
	"migrations/4_add_protocol_version.sql": migrations4_add_protocol_versionSql,
	"migrations/5_create_trades_table.sql": migrations5_create_trades_tableSql,
	"migrations/6_create_assets_table.sql": migrations6_create_assets_tableSql,
	"migrations/7_modify_trades_table.sql": migrations7_modify_trades_tableSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"latest.sql": &bintree{latestSql, map[string]*bintree{}},
	"migrations": &bintree{nil, map[string]*bintree{
		"1_initial_schema.sql": &bintree{migrations1_initial_schemaSql, map[string]*bintree{}},
		"2_index_participants_by_toid.sql": &bintree{migrations2_index_participants_by_toidSql, map[string]*bintree{}},
		"3_use_sequence_in_history_accounts.sql": &bintree{migrations3_use_sequence_in_history_accountsSql, map[string]*bintree{}},
		"4_add_protocol_version.sql": &bintree{migrations4_add_protocol_versionSql, map[string]*bintree{}},
		"5_create_trades_table.sql": &bintree{migrations5_create_trades_tableSql, map[string]*bintree{}},
		"6_create_assets_table.sql": &bintree{migrations6_create_assets_tableSql, map[string]*bintree{}},
		"7_modify_trades_table.sql": &bintree{migrations7_modify_trades_tableSql, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

