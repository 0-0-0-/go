// Code generated by go-bindata.
// sources:
// latest.sql
// migrations/1_initial_schema.sql
// migrations/2_index_participants_by_toid.sql
// migrations/3_use_sequence_in_history_accounts.sql
// migrations/4_add_protocol_version.sql
// migrations/5_create_trades_table.sql
// migrations/6_create_assets_table.sql
// migrations/7_modify_trades_table.sql
// DO NOT EDIT!

package schema

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _latestSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x5c\x5d\x6f\xdb\xb8\xd2\xbe\xcf\xaf\x20\xf6\xc6\x31\x60\x07\x71\x9a\x4f\xe7\x6d\x01\xd7\x51\xb7\x46\x5d\x79\x6b\x3b\x6f\xb7\x58\x2c\x08\x5a\xa2\x6d\x9e\x4a\xa2\x4a\xd2\x69\xb2\x07\xe7\xbf\x1f\xe8\xcb\xfa\x22\x45\xc9\x56\xdb\x73\x19\x73\x34\xf3\x3c\xc3\x21\x87\x9c\x21\xd2\xef\x9f\xf4\xfb\xe0\x0f\xca\xc5\x86\xe1\xc5\xa7\x29\xb0\x91\x40\x2b\xc4\x31\xb0\x77\xae\x7f\xd2\xef\x9f\x04\xe3\x0f\x3b\xd7\xc7\x36\x58\x33\xea\xa6\x02\x4f\x98\x71\x42\x3d\x70\x77\x76\x7d\x76\x95\x91\x5a\xbd\x00\x7f\x03\x83\xcf\x0b\x22\x27\x0b\x63\x09\xb8\x40\x02\xbb\xd8\x13\x50\x10\x17\xd3\x9d\x00\xaf\xc1\xf9\x7d\x38\xe4\x50\xeb\x6b\xf9\x57\xcb\x21\x81\x34\xf6\x2c\x6a\x13\x6f\x03\x5e\x83\xce\xe3\xf2\xdd\x6d\xe7\x3e\x51\xe7\xd9\x88\xd9\xd0\xa2\xde\x9a\x32\x97\x78\x1b\xc8\x05\x23\xde\x86\x83\xd7\x80\x7a\xb1\x8e\x2d\xb6\xbe\xc2\xf5\xce\xb3\x04\xa1\x1e\x5c\x51\x9b\xe0\x60\x7c\x8d\x1c\x8e\x73\x66\x5c\xe2\x41\x17\x73\x8e\x36\xa1\xc0\x77\xc4\x3c\xe2\x6d\xee\x63\xec\x18\x31\x6b\x0b\x7d\x24\xb6\xe0\x35\xf0\x77\x2b\x87\x58\xbd\x80\xac\x85\x04\x72\x68\x22\x66\xe3\x35\xda\x39\x02\x0a\xb4\x72\x30\xf7\x91\x85\x03\xd0\x9d\xc2\xe8\x77\x22\xb6\x90\x12\x3b\x83\xe3\x24\x9a\x0d\x13\xb9\x78\x08\x36\x94\xf9\xd0\x25\x1b\x86\x02\xcc\xfc\x1e\x2c\x5f\x7c\x3c\x04\xcb\xd1\xdb\xa9\x71\x0f\x16\xd6\x16\xbb\x68\x18\x83\xb8\x07\xb3\xef\x1e\x66\x43\xd0\x0f\x67\x6c\x3c\x37\x46\x4b\x23\x12\x2d\xea\x01\xa7\x27\x00\x00\x40\x6c\x20\xf0\xb3\x00\xe6\x6c\x09\xcc\xc7\xe9\xb4\x17\xfe\x8a\x7c\xdf\x21\xd8\x86\x48\x80\x60\x1e\xb8\x40\xae\x0f\x02\xa0\xe1\x9f\xe0\x1f\xea\xe1\x93\xee\xfd\x49\x1e\xe8\x96\x70\x41\xd9\x0b\x44\x96\x45\x77\x9e\xe0\x90\xd8\x90\xe3\x6f\x09\xe0\x85\xf1\xe9\xd1\x30\xc7\x35\x31\x27\xd2\x2a\xad\x21\xcc\xc5\x72\x34\x5f\x82\xcf\x93\xe5\x7b\x30\x08\x7f\x98\x98\xe3\xb9\xf1\xd1\x30\x97\xe0\xed\x97\xf8\x27\x73\x06\x3e\x4e\xcc\xff\x1f\x4d\x1f\x8d\xfd\xdf\xa3\x3f\xd3\xbf\xc7\xa3\xf1\x7b\x03\x0c\x74\x64\x0e\x76\x7b\x51\x51\xea\xf7\x15\xd9\x10\x4f\x80\x07\xe3\xdd\xe8\x71\xba\x04\x1e\x7e\x16\x4f\xc8\x39\xed\x28\x18\x77\x86\x43\x86\x37\x96\x83\x38\xef\x16\xa7\xcb\xb6\x19\xe6\x1c\x58\x5b\xc4\x90\x25\x30\x03\x4f\x88\xbd\x10\x6f\x73\x7a\x7d\xd9\xad\x98\x28\xce\x71\x1b\xcc\x42\x35\x29\x2f\xe2\x09\xbc\xc1\xac\x88\x31\x90\x82\xe2\xc5\xc7\x72\x98\x52\x71\x8b\xda\x32\xf1\xc1\x85\x5c\x9c\x70\xbe\xc3\x4c\xf2\xc1\xd5\x75\xfa\x81\xce\x1f\x2d\x87\x6d\x56\xe7\x4f\x0b\xda\x2a\x22\x60\xf6\xd9\x34\x1e\xc0\xdb\x2f\x1a\x46\xa3\xe9\xd2\x98\x6b\x08\xed\x75\x15\x86\xcf\x88\xad\xc2\x86\xd7\x6b\x6c\xb5\x10\x75\xb1\x9e\x38\xec\x0a\x6b\x06\xa6\xcb\x2b\x1f\x27\x89\x1c\xf5\x71\xb4\x0f\x2a\x25\x7f\xa3\xcc\xc6\xec\x37\x45\x34\x87\x71\x2c\x1f\xb2\xb1\x40\xc4\xe1\xe0\x5f\x9c\x7a\x2b\x75\xb0\x39\xd8\xde\x60\x76\xbc\x1f\x62\x3d\xb1\x1f\x38\xfe\xb6\xc3\x9e\xa5\xc2\x16\x09\xc3\x2d\xe2\xdb\x5a\xab\xd0\x67\xf8\x89\xd0\x1d\x87\xda\x0f\x63\xb7\x30\xe4\x71\x14\x25\xd7\x70\x22\xf6\x38\x92\x5d\xee\xbc\x60\x21\x9d\x88\x7a\xf2\x96\x43\xb9\x2c\x31\x05\x47\x85\x7d\x6e\x2a\x7e\xc3\x30\x12\xda\x8f\x22\xd9\x9d\x6f\xd7\x96\xdd\x87\x4e\xfc\xa7\xeb\x53\x26\x30\x83\xc9\x69\xa7\xc8\x65\x50\x0c\x22\x2a\x90\x03\x2d\x4a\x3c\x2e\x8f\xc1\x35\xc6\xd0\xa7\xd4\x91\x8f\x06\x87\x2f\xb8\xc6\xaa\xb9\x0e\x87\x19\xe6\x98\x3d\xa9\x44\x5c\xf4\x0c\xc5\x33\x0c\xb6\x4e\x4e\xfe\x51\x49\xf9\x8c\x0a\x6a\x51\x47\xc9\xeb\xbc\xc6\xde\x9a\xce\xb3\x8f\x98\x20\x16\xf1\x51\x1b\x59\x55\xae\x56\x97\x8b\xea\xef\x02\xfa\x7d\xa5\x29\xe5\x76\xd3\x4b\xa5\x8d\x9f\x95\x6e\x1a\x11\x3d\x32\xfd\x54\xda\x2a\xa7\x23\xb9\x78\x45\x7a\xda\x7f\xd0\x62\x6c\x96\xcf\x7c\x85\x7d\x20\xb3\x6b\xaa\x64\xc2\x13\xb9\x15\x51\x09\x33\xd3\x91\x89\x29\xfa\x89\xd3\x1d\xb3\x70\x12\xdd\x8a\x94\x90\x2c\xf3\x4e\x67\x38\x2c\x49\xd4\x58\x07\x82\x21\x1b\x1f\xef\xce\x48\x4d\x21\xdf\x1f\x9b\xc7\xe3\xbc\x76\x48\x56\xa1\xeb\x35\x66\x4a\xb3\xe1\xee\xab\x3b\x8d\x44\x42\xd1\xd1\xb5\x4a\xe4\x89\x3a\x3b\x17\xcb\x05\x42\x0b\x98\x69\x6d\xed\xe5\x2a\xcd\x25\x52\x55\x16\x43\x48\x84\x43\x8e\x1d\x07\x33\xb0\xa2\xd4\xc1\xc8\x8b\xc6\xc6\x33\x73\xb1\x9c\x8f\x26\xe6\xb2\x30\x6f\x30\x43\x04\x86\xd7\x70\x30\x7e\x6f\x8c\x3f\x80\xd3\xd3\x2c\xc5\x37\xe0\xbc\xdb\xd5\xa9\x92\x7c\xbe\x67\xf5\x7f\x25\xa2\x35\xf4\xe5\x48\x17\xd4\x17\x3c\x12\x02\xac\x8c\xf5\xfd\x52\x6e\x35\xd1\xa9\x14\xd7\x4d\x75\x75\xf6\x98\x63\x92\x9d\x0a\x5f\xbb\xe9\x4e\x63\xe5\x67\x25\xbc\x86\x64\x8f\x4c\x79\x1a\x6b\xe5\xa4\xa7\xfa\xa0\x22\xed\x65\x3e\x69\x35\x56\x93\xf8\xcc\x42\xaa\x7d\xfb\x88\x37\x67\xcd\x9d\xa6\x6e\x66\xac\x4e\x72\x52\xd9\xd4\xb4\xfa\x78\x8e\x94\x4b\x4f\x75\xb5\xf9\x25\x97\x13\xf1\x0c\xb1\xf7\x84\x1d\xea\x63\x59\xc1\x4f\x3c\x07\x57\x85\x9d\x23\x14\x83\x2e\x16\x48\x31\x14\x78\x41\x35\xcc\xc9\xc6\x43\x62\xc7\xb0\xac\x36\x75\x77\xdd\xfd\xeb\xef\xf4\x74\xf1\xef\xff\xc8\xce\x17\x7f\xfd\x5d\xbc\xb3\x60\x97\x2a\xca\x48\xa9\x2e\x8f\x7a\xb8\xf2\xb4\x92\xea\x2a\xab\x89\x99\x11\x17\xc3\x15\xdd\x79\x36\x0f\x66\xee\x96\x21\x6f\x53\x55\xf4\x8c\x8a\x60\xc4\x4e\x56\x4f\x8c\xa5\xd6\x92\x8f\x96\xcf\xcc\x9c\x16\xeb\x28\x20\x1a\x1f\xcf\xa6\x8f\x1f\xcd\x60\x4a\x17\xc6\xb2\xa2\x60\x98\x2d\xcd\x64\xcb\x85\xcd\x0e\xee\xed\x91\x50\xe8\x6f\x44\xaa\xf2\xc0\x5f\x87\xa4\x32\x73\xb6\x46\x53\x69\xa1\x11\x51\xcd\x36\x2f\xa7\xfa\x80\x04\x02\x6b\xca\x6a\xf4\x0a\xc0\xc3\x68\x39\xd2\x50\x9c\x98\x0b\x63\xbe\x04\x13\x73\x39\x2b\xf5\x0b\xc2\xec\xb8\x00\xa7\x9d\x01\x24\x1e\x11\x04\x39\x90\x87\xba\xce\xf8\x37\xa7\xd3\x03\x9d\x8b\xf3\xc1\x4d\x7f\x70\xde\xbf\xb8\x04\x83\xc1\xf0\xe2\x66\x78\xfe\xea\xec\xfa\xe2\xe6\xfa\xee\xb2\x7f\x7e\xd3\xe9\xde\xd7\xd3\x7e\x01\x89\x67\xe3\xe7\xbc\x0b\x56\x2f\x50\x50\x62\x57\x5a\x7a\x75\x71\x77\x3e\x68\x62\xe9\x15\xdc\x71\xbc\xdf\xe2\x21\xf1\x60\xb1\xf2\x5e\x6d\xef\xfa\xe2\xee\xb6\x89\xbd\x4b\x88\x6c\x1b\x16\xab\x29\x95\x36\x2e\x2f\x07\xb7\x77\x4d\x6c\x5c\xc1\x28\x9f\x24\x47\xdb\xb0\xf5\x54\x69\xe2\x6a\x70\x7b\xd5\xc8\xc4\x75\x62\x22\xde\x6e\x6a\x98\xb8\xb9\x1a\x34\x8a\x81\x1b\xe8\x52\x9b\xac\x5f\xea\xb3\xb8\xbe\xba\x3d\xbf\x88\x4d\x28\xd6\x46\x65\x47\xa7\xce\xe2\x38\xa8\xdb\x15\xac\x79\x8d\xde\x85\x31\x35\xc6\xcb\x4c\xfb\xf0\x8c\xe3\xea\x4e\x50\x0f\x0c\x7a\x51\xaf\xb0\x06\xdd\x72\x93\xe7\x08\xb2\x95\x8d\x85\x56\xa8\xe6\x72\x58\x13\xa2\xb2\xc6\x42\x13\xa6\x0a\xb5\xb2\x3a\x7d\x0b\x6a\x6b\xd4\x43\x0f\x9f\xa6\x66\x05\xb9\x36\xa6\xad\x3a\x4b\x37\x99\x46\x45\x01\xae\x05\x97\x4b\xea\x50\xed\x68\xd5\xdf\xf8\x0f\x9f\xca\xa6\x57\xcd\x36\x26\x53\x77\x12\x69\x32\x9d\xca\x8b\x65\x73\x97\x14\xd3\x45\xe1\x6f\xe8\x7f\xc5\x2f\x89\x89\xb4\xd8\xd3\xf4\x50\x57\xd0\x1a\xde\x05\x46\x0f\x0f\xd9\xf2\x91\xcc\x30\xf8\x63\x3e\xf9\x38\x9a\x7f\x01\x1f\x8c\x2f\xe0\x94\xd8\xba\x8b\x42\x61\xbf\x4b\xdb\xdd\x30\x6d\x94\xc3\x6c\x57\x1b\xb6\xc2\x2e\x6f\x56\x46\xee\x20\x60\xe0\xd1\x9c\x7c\x7a\x34\xc0\x69\x2a\xde\xcb\x74\xfc\x7b\xb9\xfe\x7c\x43\xd7\xb4\x33\xad\x8d\x89\x37\x9a\x54\xc5\x45\x47\xb3\x3b\xb6\xcb\x4c\x6e\xa4\x8a\x69\x05\xac\xda\xcc\x95\x77\x1f\xed\x66\xd2\x2e\x7b\x95\x99\x2a\xfe\x95\xd0\xb4\x1e\x88\x42\x7a\xf5\x12\x47\x75\x42\x65\x62\x3e\x18\x7f\xd6\xab\x9a\x85\xa2\x45\x3d\x60\x66\x16\x17\xc4\xe3\x62\x62\xfe\x0e\x56\x82\x61\x9c\xac\x30\xc5\x4a\x5a\xed\xcf\x8a\x07\xc3\x49\x55\x64\x91\xe4\x4a\x7a\x79\x3c\x91\x70\xaf\x54\x33\x93\x81\xdb\x22\xbe\x3d\x06\x59\x58\x3a\xac\x05\xab\x58\x70\x94\xa1\x89\x8e\x76\xc7\xe0\x89\x34\xd4\x43\x54\xa8\x66\xf6\xca\x85\x4b\xe9\x22\x83\x38\x88\x8d\x70\xfc\x00\xa4\xf1\xbe\x1c\x01\x2e\xa8\xcb\xc2\x4e\x5e\xd3\xe4\x10\xcb\x9a\x6c\xbd\xa4\xa1\xa6\x02\x9b\x56\x55\x8e\x84\x49\xec\xda\x00\xd3\x86\x45\x4f\xda\x19\xd4\x80\xa6\x3e\xf4\xdb\xc2\x1d\xeb\xca\x42\x57\x24\x87\x83\x98\xc8\x09\x88\xe7\xf6\x08\xc4\xba\x14\x31\x7d\x20\x85\x7c\xf7\xa9\x4c\x82\xfa\x41\x54\x6e\xe9\x41\x1c\x62\xf0\xa9\x8e\x43\x9d\x5f\xed\xe8\xfd\x23\xa8\x60\xab\x3e\xde\xd7\x79\x75\x59\xc8\xc9\x8b\xae\x1c\x46\x39\xa2\xac\x5f\xdb\x82\x55\xd2\x59\x6f\x7b\x93\x01\x14\xd1\x94\x88\x63\xa6\x35\xd5\x71\x78\x48\xea\xc2\x4f\x30\x3b\xdc\x15\xd7\xeb\x23\xd2\x41\x4e\x4b\x01\xab\x8d\x0b\xc8\x92\xc7\x03\x72\x2c\x49\xcf\xd9\xa1\xf4\xeb\xce\x3f\x0e\x51\x5e\x97\x0e\x57\xa9\x79\x2e\xc5\xe7\x23\xc2\xc2\x07\xfa\xad\x20\x2c\x6a\xd3\x61\xcc\x35\xfc\x7b\xa5\x7e\x7f\xaf\xf4\xa8\x43\x41\xa2\x85\xd5\x12\xeb\xd1\x21\x6e\x98\x93\x02\xad\xad\x79\xb7\x81\x63\xb5\x7e\x8b\x2a\xf3\xa5\xaa\x24\xf5\x60\xfc\x02\xfd\x58\x87\x6a\x0d\xe4\x4e\xc7\xc9\x8b\xfa\xfc\x79\x34\x12\x6c\x80\xfd\xf8\x38\xa8\xd2\xad\x47\x2c\x59\x65\x79\x85\xf1\xd9\x27\xd0\x17\xdc\xa6\x0f\x8e\x87\x4a\xad\xda\xc3\x56\x20\xa4\x01\x1a\x67\xae\x40\xe5\x3e\x88\x5a\x42\x2b\x53\xad\x4d\x9a\x75\x23\x39\xa3\xbc\xed\x60\xc8\xa9\x3e\x24\xcb\xab\xd5\x15\x9e\x1b\xb7\xef\xe8\xd2\x83\x66\x2d\xfc\xc2\x07\xf5\xc9\x64\xde\x97\xff\x30\xff\x67\xdf\xb0\xeb\x98\x64\x64\xeb\x93\x90\xbd\x96\xff\x61\x6c\xa4\x4f\xf3\x75\xb4\x64\x1f\xd5\xe7\x97\x5c\x5d\x7f\x18\xa7\xfd\x73\x1b\x1d\x0f\x65\x8d\x21\xaf\x3a\xed\x25\xfc\x88\xa5\x5d\xd4\x2e\xbd\x76\x34\x5d\xe0\x79\xa5\xf9\x83\x6b\x4b\x2b\xbc\xca\x44\x1d\x0e\x9a\xd3\x74\xa5\xb1\xf6\xd2\x57\x59\x71\x2d\xec\xfa\x24\x96\xbd\xe2\xfc\x88\xb0\x29\xeb\x3f\xf8\x82\x15\x1e\xe2\xf6\x89\x3c\xa9\xeb\xc0\x15\xa5\x5f\x0f\xf6\x72\x85\x4e\xed\x11\xe1\xf4\x34\x79\x63\xde\x7f\xf3\x06\x74\x38\x75\xec\x4c\xd7\xa0\x33\x1c\x0a\xfc\x2c\xba\xdd\x1e\x50\x0b\x5a\xd4\xae\x27\x18\x55\x40\xd5\xa2\x2b\xba\xdb\x6c\x45\x2d\xf3\x39\xd1\x6a\x00\x39\xd1\x02\x84\x2e\xf8\xfc\xde\x98\x1b\x51\x90\x81\xd7\xe0\xd5\x2b\xcd\x93\x78\xe9\x13\xe9\xb4\x7c\x02\xd7\x99\x0a\xf9\xbb\x0f\xed\x14\xc9\x6d\xac\x2b\x89\xab\x90\x80\x77\xb3\xb9\x31\xf9\xdd\x8c\x0a\xe2\x05\x89\x2e\x98\x1b\xef\x8c\xb9\x61\x8e\x8d\x45\xe9\xb8\xab\xe9\x1f\x28\x3d\x11\x5f\xe8\x7e\xb9\x1f\xb2\x38\x64\x5e\x48\xee\xca\x52\x1f\x84\x25\xfc\xe6\x1e\x28\x3f\xeb\xff\x85\x6e\x50\x80\xc9\xfb\xa2\x2c\xd4\x72\x50\x14\x2f\xfa\xff\x0b\x0e\x51\x87\x46\xa9\x92\x52\x37\x3a\x54\xff\x83\x01\x58\xd4\xf5\x1d\x2c\x70\xc8\xe1\xbf\x01\x00\x00\xff\xff\x0e\x92\x69\x4f\xb0\x41\x00\x00")

func latestSqlBytes() ([]byte, error) {
	return bindataRead(
		_latestSql,
		"latest.sql",
	)
}

func latestSql() (*asset, error) {
	bytes, err := latestSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "latest.sql", size: 16816, mode: os.FileMode(420), modTime: time.Unix(1508869623, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _migrations1_initial_schemaSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x5a\x5f\x6f\xdb\xc8\x11\x7f\xf7\xa7\x18\xdc\x8b\x6c\xd4\x6a\x2f\xb8\xe2\x70\x95\xe1\x03\x14\x99\x69\x84\xca\x54\x22\x51\x4d\x82\xc3\x61\xb1\x22\x47\xd4\xd6\xe4\x2e\xb3\xbb\x74\xa4\x2b\xfa\xdd\x0b\x52\x24\xc5\xff\xa4\x1c\xc9\xf7\x28\xee\xec\xcc\xfc\x66\x66\x7f\x33\x5c\x6a\x38\x84\xbf\xf8\xcc\x95\x54\x23\xac\x82\xab\xe1\xf0\x6a\x38\x84\x0f\x42\x69\x57\xe2\xf2\xe3\x0c\x1c\xaa\xe9\x9a\x2a\x04\x27\xf4\xe3\xe5\xab\xa5\x61\x81\xd2\x54\xa3\x8f\x5c\x13\xcd\x7c\x14\xa1\x86\x7b\xf8\xf1\x2e\x5e\xf2\x84\xfd\x54\x7d\x6a\x7b\x2c\x92\x46\x6e\x0b\x87\x71\x17\xee\x61\xb0\xb2\xde\xfd\x32\xb8\x4b\xd5\x71\x87\x4a\x87\xd8\x82\x6f\x84\xf4\x19\x77\x89\xd2\x92\x71\x57\xc1\x3d\x08\x9e\xe8\xd8\xa2\xfd\x44\x36\x21\xb7\x35\x13\x9c\xac\x85\xc3\x30\x5a\xdf\x50\x4f\x61\xc1\x8c\xcf\x38\xf1\x51\x29\xea\xc6\x02\xdf\xa8\xe4\x8c\xbb\x77\x57\x09\x3c\x93\xfa\x38\x82\xc0\x0b\x5c\xf5\xd5\xbb\x03\x6b\x1f\xe0\x08\x8c\xcf\x96\x61\x2e\xa7\x73\xf3\x0e\x96\xf6\x16\x7d\x3a\x82\xe1\x1d\xcc\xbf\x71\x94\x23\x18\xc6\xc8\x27\x0b\x63\x6c\x19\x47\x49\x98\xbe\x03\x73\x6e\x81\xf1\x79\xba\xb4\x96\xa9\x42\xf8\x34\xb5\xde\xc3\x72\xf2\xde\x78\x1c\x43\xe0\x12\x9b\x6a\xea\x89\xc8\x7a\xc1\xfc\x51\x4b\xc9\x91\xc9\xfc\xf1\xd1\x30\xad\x16\x37\x0e\x02\x30\x37\xab\x4a\x60\xba\x84\xc1\x87\xd9\xdf\x02\x37\x4a\x5e\x20\x85\x8d\x4e\x28\xa9\x07\x1e\xe5\x6e\x48\x5d\x1c\x94\xfd\xd8\x2a\x2d\x24\x9e\x2f\x0a\x07\x7d\xc5\x20\x84\x6b\x8f\xd9\xcd\x01\x28\xba\xf0\x32\xfc\x89\xd9\x08\x7e\x54\xb2\xa0\xf7\x01\xc2\x46\x48\x88\x9e\x47\x15\xa7\x50\x2b\x10\x1b\xb8\x7e\xc2\xfd\x2d\x3c\x53\x2f\xc4\x1b\x08\x28\x93\x2a\x0e\x49\x5c\x86\x48\xa5\xbd\x25\x01\xd5\x5b\xb8\x4f\xbc\xbe\x2d\xa6\x30\x12\x73\x70\x43\x43\x4f\x13\x4d\xd7\x1e\xaa\x80\xda\x18\x95\xf3\xa0\xb4\xfa\x8d\xe9\x2d\x11\xcc\xc9\x55\x68\x31\xee\x2c\xf2\x6c\x4f\xa8\x6d\x8b\x90\x6b\x95\xc2\xb7\xc6\x6f\x67\xc6\x11\x7c\x12\xbb\x2c\x02\x77\x60\x65\x66\x47\xf9\x7c\xc4\xfb\x2a\x5a\xe1\xfa\x0a\x00\x80\x39\xb0\x66\x2e\xe3\x3a\xce\x94\xb9\x9a\xcd\x6e\xe3\xe7\xd4\x71\x24\x2a\x05\xf6\x96\x4a\x6a\x6b\x94\xf0\x4c\xe5\x9e\x71\xf7\xfa\xe7\xbf\xdf\x5c\xdd\x54\x6a\x25\xd1\x8e\x9b\x0d\xda\xe7\x76\x39\x51\x9a\x78\x5c\x02\x42\x9a\x10\xa4\x72\x22\x40\x49\x63\x5e\x68\x92\xfc\x41\x48\x07\xe5\x0f\xc0\xb8\x46\x17\x65\x69\x35\xae\x97\xfa\x25\x07\x35\x65\x9e\x82\xff\x28\xc1\xd7\xcd\x41\xf1\xd0\x71\x51\x9e\x39\x28\x89\xd2\x24\x28\x0a\xbf\x86\xc8\xed\x26\x47\x0f\xc2\x64\x4b\xd5\xb6\x3e\xa3\x25\xf9\x40\xe2\x33\x13\xa1\x22\x9d\x1b\x93\x18\x49\xca\x15\x3d\xb0\x6f\x9c\x95\xcc\x8f\x07\xe3\xdd\x78\x35\xb3\xe0\xc7\x92\x85\x63\x56\xfa\xc9\xdb\x9e\x50\xe8\x10\xaa\x21\xea\x20\x4a\x53\x3f\x80\xe8\x20\x45\xbd\x24\x7a\x02\x7f\x08\x8e\xe5\x3d\x12\xa9\xee\xdc\x74\x90\x0d\x03\xa7\xb7\x6c\x56\x47\xc9\x4f\x3f\x10\x52\xa3\x24\xcf\x28\x15\x13\xbc\x82\xe5\x4d\xb9\xa2\x84\xa6\x1e\xb1\x05\xe3\xaa\xbe\x20\x37\x88\x24\x10\xc2\xab\x5f\x8d\x9a\x2e\xd9\x60\x53\xae\xe3\x65\x89\x0a\xe5\x73\x93\x88\x4f\x77\x44\xef\x88\x42\x4d\x14\xfb\xa3\x2a\xd5\x5c\xca\xc7\xb4\x05\x54\x6a\x66\xb3\x80\x9e\x9d\xa1\xea\x6d\x1c\xf9\xaa\x1e\x53\xff\xe3\xde\x4d\x20\xa7\xe2\x27\xcc\x21\x0a\xbf\xa6\x61\x58\x1a\x1f\x57\x86\x39\x69\x89\x44\x1e\x7c\x2a\xdd\xcf\x46\x8c\x60\x69\x8d\x17\xd6\xa1\x91\xbe\x89\x1f\x4c\xcd\xc9\xc2\x88\x5b\xdf\xdb\x2f\xc9\x23\x73\x0e\x8f\x53\xf3\xdf\xe3\xd9\xca\xc8\x7e\x8f\x3f\x1f\x7f\x4f\xc6\x93\xf7\x06\xbc\x39\x0b\x50\x98\x7f\x32\x8d\x07\x78\xfb\xa5\x03\xf1\x78\x66\x19\x8b\x13\x01\x67\xba\x3b\xc4\xff\xca\x9c\x4e\x2c\x97\x2a\xd4\xae\x66\x9a\xa7\xc7\xc6\x86\x1b\x04\x1e\xb3\x0f\xb8\xe2\x7e\xf4\x9d\xed\xe8\xf0\x48\x89\x50\xda\x98\x96\x7a\x03\xf7\xa7\x3c\x35\x18\x8c\x46\x15\x89\x1e\x87\x22\x0f\xef\x72\xb4\xd0\x64\x25\x8e\x7d\x03\x2d\xd4\xed\xad\x4f\xc0\xf7\x90\x42\x93\x67\xe7\xa5\x85\x0e\x2b\xaf\x45\x0c\x27\x82\xfd\x4e\x6a\xe8\xb0\x56\x25\x87\xa6\x0d\x2d\xf4\x90\xdb\x72\xb9\x92\x4d\x29\x22\xef\x5f\xef\x71\x2c\x99\xc2\x3a\x86\xbc\xbe\x0c\xd2\x4e\x06\xb5\xb2\x47\xd3\xcd\xf3\x0a\x6d\x6c\xcd\x4d\xb3\xde\x9f\x32\xad\xe9\x1d\x41\xfe\x8c\x9e\x08\x10\x34\xee\x2a\x54\xbd\x8b\x66\xa7\xd0\xd3\x0d\x8b\x3e\x46\xaf\x90\xb5\x4b\x51\x14\x9a\x96\x15\x73\x39\xd5\xa1\xc4\xba\x37\xaa\x7f\xfc\x7c\xf3\xdb\xef\x47\x16\xfe\xef\xff\xea\x78\xf8\xb7\xdf\xcb\x43\x1c\xfa\x82\xc4\xdd\xa0\xca\xd9\x99\x2e\x2e\x38\xb6\xb2\xfa\x51\x57\x55\x4d\x82\x8c\xf9\x48\xd6\x22\xe4\x8e\x8a\x32\xf7\x8b\xa4\xdc\xc5\x98\x0c\xf3\x87\x89\x39\xe9\xd1\x49\x6c\xf7\x3a\xef\x87\xe3\x32\x37\x67\x5d\xdd\x1d\x0e\xf2\x93\xf9\x6c\xf5\x68\x46\x29\x8d\x5e\xa8\x53\x94\x1c\x77\xfa\x99\x7a\xd7\x83\x5e\x03\xc5\x60\x34\x92\xe8\xda\x1e\x55\xaa\xc2\xe8\x67\x43\xd1\xd8\xac\x4e\xc2\xd1\xc1\x7e\x6d\x48\x3a\x42\x11\x3c\xe1\xfe\x78\xad\x62\x2e\xad\xc5\x78\x6a\xb6\xa0\xad\x12\xde\x89\x09\x8c\x4b\x69\xfc\xf0\x90\xb3\xd6\xc7\x47\xf8\xb0\x98\x3e\x8e\x17\x5f\xe0\x5f\xc6\x17\xb8\x66\xce\xe9\x3d\xf8\x82\x48\x9b\x6c\xb6\x61\x6d\xf5\xb3\x13\xed\x3a\x1b\x50\x52\x48\x53\xf3\xc1\xf8\xfc\x82\x46\x15\xef\xcb\xe9\x83\xb9\x59\xdf\xb6\x56\xcb\xa9\xf9\x4f\x58\x6b\x89\x08\xd7\x89\xf0\x6d\xa5\x2f\xd4\x79\x1a\xb5\xb7\xb3\xb9\x19\xf7\xca\x5e\x3e\x96\x3b\x6c\x9d\x6b\x87\x86\x7a\x36\xe7\x0e\xea\xfa\xb9\x57\xea\xe5\xb7\xd5\xb6\x5d\x5b\xe3\x04\xc9\x7a\x7f\x58\xff\x5e\xb7\x57\xe6\xf4\xe3\x2a\xf5\xbe\xa4\x3b\x8f\x21\xbd\x76\x2b\xb8\x5f\xf7\x9a\x7d\x9b\xde\xa0\x35\x79\x7e\xa4\xd5\x73\xfa\xcc\x9c\xde\xde\x1e\xa7\xfa\xdb\xda\x8b\x82\x0e\x04\x22\x20\xc1\x45\x40\x24\x8a\xf3\x38\x1a\xfa\xdf\x8b\x60\x55\xd1\x64\x37\x7a\xeb\xfd\xd9\x01\x15\x75\xe7\x31\xa5\x77\x95\x05\x10\xf5\xee\xe5\x4f\xef\x45\x7c\xac\x18\xe8\x77\x6c\x6b\xbc\x65\xdc\xc1\x1d\x29\xdf\xab\x13\xc1\x49\x72\x79\x7e\x56\xd7\x3b\xad\xe5\x71\x64\x97\xfc\x45\xf6\x3e\x08\x9e\x00\xe4\xcc\xe1\x6f\x33\xd4\xed\x7e\x67\x0a\x12\x0a\x88\xf4\x45\x73\xf1\x79\xe8\xbd\xd5\x44\x27\x01\x45\x42\x1d\x5e\x27\x87\x23\x52\x99\x5d\x72\x5f\xc2\xf5\x3a\x3b\x9d\x87\x34\x93\xec\x0f\xe2\xa2\x35\x53\xb0\xf3\x12\x8a\x69\x56\x57\xba\xc5\xbf\x70\x0a\x2a\x1f\x0d\x3a\xb1\x94\x36\xf4\x47\x96\xfb\x86\xf3\x3a\x99\xc9\x7f\x34\xea\x82\x95\x93\xed\x8f\xa8\xee\xf3\xd4\xeb\x40\xab\xfd\x30\xd6\x85\xb1\x6e\x53\x7f\xb0\xe9\xa4\xf8\x3a\x00\xb3\x8b\x9e\x2e\x50\x8d\x93\x7f\x51\xf5\xf1\x8e\xfc\xe2\xdc\x50\x36\x55\x3b\x55\x9d\xca\x10\x45\xa5\xc5\x7b\xe4\x4b\x50\x44\x9b\xbd\x3e\x80\x8a\x3b\x4e\x03\x77\xa1\x9e\x59\xb5\xd2\x0b\x48\x5d\xe7\x8c\x87\x66\xbd\xbb\xd0\x34\x9e\x28\x6e\x18\x08\x5f\x38\x8f\x57\x13\xd2\x9c\x8f\xfc\xf8\x79\xf1\xe3\x52\x35\xf6\xe2\x49\x58\x4b\xea\x60\x36\x1b\xa5\xef\x92\x64\x2d\xc4\xd3\x79\x0a\xaa\xc5\x40\xe7\x08\x76\x7d\x9d\x7e\x17\x1b\xfe\xfa\x2b\x0c\x94\xf0\x1c\x42\x95\x42\x1d\x97\xe2\x60\x34\xd2\xb8\xd3\x37\x37\xb7\xd0\x2c\x68\x0b\xa7\x9f\x20\x53\x2a\x44\xd9\x2c\xba\x16\xa1\xbb\xd5\xbd\xcc\x17\x44\xdb\x1d\x28\x88\x96\x5c\xb8\x81\x4f\xef\x8d\x85\x71\x38\x4f\x70\x0f\x3f\xfd\x94\xcb\x5e\xd3\xbf\xf9\xc0\x16\x7e\xe0\xa1\xc6\x38\x13\xf9\x3f\x02\x3e\x88\x6f\xfc\xca\x91\x22\x80\xf8\x3f\x4e\xf5\xe5\x62\x53\x65\x53\x07\xef\x3a\x04\x8b\x07\xaa\x6d\x53\x8e\x23\x7a\x89\xf5\xd7\x9c\xb6\xb6\x36\x99\xb4\xaa\xda\x64\xb2\x37\x96\x4c\xe8\xff\x01\x00\x00\xff\xff\x5d\xb2\x1f\x7d\x3f\x29\x00\x00")

func migrations1_initial_schemaSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations1_initial_schemaSql,
		"migrations/1_initial_schema.sql",
	)
}

func migrations1_initial_schemaSql() (*asset, error) {
	bytes, err := migrations1_initial_schemaSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/1_initial_schema.sql", size: 10559, mode: os.FileMode(420), modTime: time.Unix(1508537629, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _migrations2_index_participants_by_toidSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x8f\xb1\xca\xc2\x50\x0c\x46\xf7\x3c\x45\xc6\xff\x47\xfa\x04\x9d\xc4\x16\xe9\xd2\x4a\xb5\xe0\x76\x49\xdb\x8b\xcd\xe0\xcd\x25\x37\x20\x7d\x7b\x41\x07\x5b\xbb\xb8\x86\x8f\x73\x72\xb2\x0c\x77\x77\xbe\x29\x99\xc7\x2e\x02\x1c\xda\x72\x7f\x29\xb1\xaa\x8b\xf2\x8a\x93\x44\xd7\xcf\x6e\x12\x1e\xb1\xa9\x71\xe2\x64\xa2\xb3\x93\xe8\x95\x8c\x25\xb8\x48\x6a\x3c\x70\xa4\x60\x09\xbb\x73\x55\x1f\xb1\x37\xf5\x1e\xff\xb6\x5b\x1e\xff\xf3\x2f\xbc\xbd\xf1\xb6\xc6\x9b\x52\x48\x34\xfc\x28\x58\xae\x5f\x0a\x58\x26\x15\xf2\x08\x00\x45\xdb\x9c\xb6\x49\xf9\xea\xfe\xf9\x25\x87\x67\x00\x00\x00\xff\xff\x33\xec\x54\x7a\x15\x01\x00\x00")

func migrations2_index_participants_by_toidSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations2_index_participants_by_toidSql,
		"migrations/2_index_participants_by_toid.sql",
	)
}

func migrations2_index_participants_by_toidSql() (*asset, error) {
	bytes, err := migrations2_index_participants_by_toidSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/2_index_participants_by_toid.sql", size: 277, mode: os.FileMode(420), modTime: time.Unix(1508537629, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _migrations3_use_sequence_in_history_accountsSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x91\x4d\x6b\xb3\x40\x14\x85\xf7\xf3\x2b\xce\x2e\xca\xfb\x66\x91\x6d\x5c\x4d\xc6\x1b\x22\x8c\x63\x3b\x5e\xdb\x64\x25\xa2\x43\x3a\x90\x6a\xeb\xd8\xaf\x7f\x5f\x48\xd3\x0f\x08\x6d\xa1\xcb\x73\x78\xe0\x39\xdc\x3b\x9f\xe3\xdf\xad\xdf\x8f\xcd\xe4\x50\xdd\x09\x65\x49\x32\xa1\xa4\xcb\x8a\x8c\x22\xdc\xf8\x30\x0d\xe3\x4b\xdd\xb4\xed\xf0\xd0\x4f\xa1\xf6\x5d\x1d\xdc\xbd\x00\x80\x92\xa5\x65\x5c\x67\xbc\xc1\xe2\x58\x64\x46\x59\xca\xc9\x30\x56\xbb\x53\x65\x0a\xe4\x99\xb9\x92\xba\xa2\x8f\x2c\xb7\x9f\x59\x49\xb5\x21\x2c\x12\x51\x92\x26\xc5\x08\x6e\x7a\x6c\x0e\xd1\xec\x1b\xef\xec\x3f\xa2\x13\x99\xcb\x6d\xe4\xbb\x18\x6b\x5b\xe4\x67\x33\xe3\x38\x11\x52\x33\x59\xb0\x5c\x69\x42\x61\xf4\xee\x0c\xc2\x1b\xa1\x0a\x5d\xe5\x06\xbe\x43\x49\x8c\x94\xd6\xb2\xd2\x8c\xde\x3d\xff\xbc\x64\xb9\x1c\xdd\xbe\x3d\x34\x21\xc4\x89\x10\x5f\xcf\x98\x0e\x4f\xfd\x1f\xec\xa9\x2d\x2e\xde\xf5\x89\x38\xa6\xdf\xde\x90\x88\xd7\x00\x00\x00\xff\xff\x55\xe2\xdd\x2c\xbf\x01\x00\x00")

func migrations3_use_sequence_in_history_accountsSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations3_use_sequence_in_history_accountsSql,
		"migrations/3_use_sequence_in_history_accounts.sql",
	)
}

func migrations3_use_sequence_in_history_accountsSql() (*asset, error) {
	bytes, err := migrations3_use_sequence_in_history_accountsSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/3_use_sequence_in_history_accounts.sql", size: 447, mode: os.FileMode(420), modTime: time.Unix(1508537629, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _migrations4_add_protocol_versionSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\xcd\xb1\x0a\xc2\x30\x10\x06\xe0\x3d\x4f\xf1\xef\x52\x70\xef\x14\x4d\x9d\xce\x44\x4a\x32\x38\x15\xd1\xa3\x06\x6a\xae\x5c\x82\xe2\xdb\xbb\xba\x88\x4f\xf0\x75\x1d\x36\x8f\x3c\xeb\xa5\x31\xd2\x6a\x2c\xc5\x61\x44\xb4\x3b\x1a\x10\x3c\x9d\x71\xcf\xb5\x89\xbe\xa7\x85\x6f\x33\x6b\x85\x01\xac\x73\xd8\x07\x4a\x47\x8f\x55\xa5\xc9\x55\x96\xe9\xc9\x5a\xb3\x14\xe4\xd2\x78\x66\x85\x1b\x0e\x36\x51\xc4\x16\x3e\x44\xf8\x44\xd4\x1b\xf3\x6d\x39\x79\x95\xff\x9a\x1b\xc3\xe9\x97\xd5\x9b\x4f\x00\x00\x00\xff\xff\x83\xbb\x30\x2e\xbc\x00\x00\x00")

func migrations4_add_protocol_versionSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations4_add_protocol_versionSql,
		"migrations/4_add_protocol_version.sql",
	)
}

func migrations4_add_protocol_versionSql() (*asset, error) {
	bytes, err := migrations4_add_protocol_versionSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/4_add_protocol_version.sql", size: 188, mode: os.FileMode(420), modTime: time.Unix(1508537629, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _migrations5_create_trades_tableSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x94\x51\x6f\xaa\x40\x10\x85\xdf\xf9\x15\x13\x9f\x30\x17\x93\x7b\x6f\x5a\x5f\x4c\x9a\x58\x25\xad\xa9\xc1\xd6\x4a\xd2\x37\xb2\xb0\x23\x6c\xa2\x2c\x99\x1d\xda\xf0\xef\x1b\x68\x69\x10\x57\xad\xaf\x9c\x39\x67\x38\xbb\x5f\x76\x34\x82\x3f\x7b\x95\x92\x60\x84\xb0\x70\x66\x6b\x7f\xba\xf1\x61\x33\xbd\x5f\xfa\x90\x29\xc3\x9a\xaa\x88\x49\x48\x34\xe0\x3a\x00\xf0\xf3\x51\x17\x48\x82\x95\xce\x23\x25\x21\x56\xa9\xca\x19\x82\xd5\x06\x82\x70\xb9\xf4\x9a\xc9\x81\x26\x89\x34\x00\x95\x33\xa6\x48\x1d\xb5\x91\xf5\x76\x8b\x64\x35\x37\xb2\xc1\xdd\xee\x84\x5e\xcb\x71\x59\x9d\x75\xeb\x9d\x8c\x84\x31\xc8\x11\x57\x05\x42\x92\x09\x12\x09\x23\xc1\xbb\xa0\x4a\xe5\xa9\x3b\xbe\x19\xf6\x22\x3b\x1e\x65\x4c\x89\x64\x71\xdd\x8e\xcf\xb8\x12\x2d\x6d\x9b\xfe\xfd\xb7\x7b\xf6\xba\xcc\xb9\xff\xff\x30\x7b\xf4\x67\x4f\xe0\x76\x47\xee\xe0\xef\xf0\xbb\x57\xac\xcb\x34\xe3\x6b\x9b\x1d\xb8\xae\xe8\x76\xe0\xfb\x75\xbb\xd6\x75\xb6\xdf\xe1\x50\xdd\xd0\x19\x4e\x9c\x96\xbf\x30\x58\xbc\x84\x3e\x2c\x82\xb9\xff\x06\x19\x93\x8c\x0a\x25\x61\x15\xf4\x91\x0c\x5f\x17\xc1\x03\xc4\x4c\x88\xe0\xda\xc8\xf4\x5a\x0a\x3b\xe1\x9d\xd4\xb8\x8a\x1a\x0c\x2f\x45\xb7\xac\xda\x52\xea\x90\xfa\xb6\x2e\x65\xf4\x90\xf4\xfa\xe4\x78\xc7\x00\x9e\x5a\xf7\x75\x78\x97\x16\x1e\xb1\xe2\x1d\x5f\xa8\x67\x63\xa3\x5e\xdb\x7d\x17\xe6\xfa\x23\x77\xe6\xeb\xd5\xb3\xfd\x5d\x48\x84\x49\x84\xc4\x89\xf3\x19\x00\x00\xff\xff\x79\x87\x24\x6b\x4c\x04\x00\x00")

func migrations5_create_trades_tableSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations5_create_trades_tableSql,
		"migrations/5_create_trades_table.sql",
	)
}

func migrations5_create_trades_tableSql() (*asset, error) {
	bytes, err := migrations5_create_trades_tableSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/5_create_trades_table.sql", size: 1100, mode: os.FileMode(420), modTime: time.Unix(1508537629, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _migrations6_create_assets_tableSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x90\x3d\x4f\xc3\x30\x18\x84\x77\xff\x8a\x1b\x1d\x91\x0e\x20\xe8\x92\xc9\x34\x16\x58\x18\xa7\xb8\x31\xa2\x53\xe5\x26\x16\x78\x80\x54\xb6\x11\xca\xbf\x47\xaa\x28\xf9\x50\xe6\x7b\xf4\xbc\xef\xdd\x6a\x85\xab\x4f\xff\x1e\x6c\x72\x30\x27\xb2\xd1\x9c\xd5\x1c\x35\xbb\x97\x1c\x1f\x3e\xa6\x2e\xf4\x07\x1b\xa3\x4b\x11\x94\x00\x80\x6f\xb1\xe3\x5a\x30\x89\xad\x16\xcf\x4c\xef\xf1\xc4\xf7\xc8\xcf\xd9\x19\x3c\xa4\xfe\xe4\xf0\xca\xf4\xe6\x91\x69\xba\xbe\xcd\xa0\xaa\x1a\xca\x48\x39\x86\x9a\xae\x1d\xa0\xeb\x9b\x65\xc8\xc7\xf8\xed\xc2\x3f\x76\xb7\x9e\x63\x46\x89\x17\xc3\xe9\xa0\xcc\x47\x3f\xe4\x13\x4b\x46\xb2\x82\x5c\xfa\x09\x55\xf2\xb7\xbf\xf8\xd8\x5f\xee\x54\x6a\x5e\xd9\xec\x84\x7a\xc0\x31\x05\xe7\x40\x27\xb6\x82\x90\xf1\x74\x65\xf7\xf3\x45\x4a\x5d\x6d\x97\xa7\x6b\x6c\x6c\x6c\xeb\x8a\xdf\x00\x00\x00\xff\xff\xfb\x53\x3e\x81\x6e\x01\x00\x00")

func migrations6_create_assets_tableSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations6_create_assets_tableSql,
		"migrations/6_create_assets_table.sql",
	)
}

func migrations6_create_assets_tableSql() (*asset, error) {
	bytes, err := migrations6_create_assets_tableSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/6_create_assets_table.sql", size: 366, mode: os.FileMode(420), modTime: time.Unix(1508537629, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _migrations7_modify_trades_tableSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x54\xcd\x6e\xdb\x3c\x10\xbc\xeb\x29\x16\x39\x49\xf8\xe4\xe0\x6b\xd1\xe6\x92\xa2\x80\xed\xb0\xae\x50\x47\x4e\x65\x19\xe8\x4d\xa0\xc4\x8d\x4c\x54\x26\x05\x92\x8a\xe1\xb7\x2f\x64\x5b\xae\x7e\x6d\x27\x39\xf4\x2a\xce\xcc\xee\x90\xa3\x19\x8d\xe0\xbf\x0d\x4f\x15\x35\x08\xab\xdc\x1a\x8d\x80\x29\x99\x83\x59\x23\xc8\x8c\x81\x51\x94\xa1\x06\x43\xe3\x0c\x6f\x21\x2f\x0c\x50\x10\xb8\x05\x29\x10\xb8\x80\x3c\xa3\x09\x5a\x0f\xc1\xe2\x09\xc2\xf1\x64\x4e\x60\xcd\xb5\x91\x6a\x17\x1d\x78\xf7\xd6\x34\x20\xe3\x90\xf4\x1e\x82\x6d\x01\xc0\xe9\xa3\xcc\x51\x51\xc3\xa5\x88\x38\x83\x89\x37\xf3\xfc\x10\xfc\x45\x08\xfe\x6a\x3e\x77\xf7\xc8\x1b\xa9\x18\xaa\x1b\xf0\xfc\x90\xcc\x48\xd0\x3a\xcd\x90\xa5\xa8\xa2\x24\x93\x1a\x59\x44\x0d\x84\xde\x23\x59\x86\xe3\xc7\xa7\x16\x50\x3e\x3f\xa3\x1a\x1c\x12\x53\x8d\x11\x4d\x12\x59\x08\xd3\x03\x82\x80\x7c\x23\x01\xf1\xa7\x64\x79\xda\xfc\x88\xd6\x36\x67\x4e\x5d\x44\x6b\xbc\x5a\xa2\xc4\xb6\x05\x5e\x64\x56\x6c\xb0\x43\x9f\x7e\x27\xd3\x1f\x60\xd7\x21\x5f\xe1\xff\x23\x71\xbf\x09\xaa\x77\x3b\x38\xe9\xbc\xc3\x44\xa5\x71\xde\x47\x0b\xf5\xd7\xca\xde\x20\xd7\x91\xc6\x2c\x43\x05\x93\xc5\x62\x4e\xc6\xfe\xe1\x6c\xcf\xb5\x9b\xd7\xfc\xa5\xb3\xb4\x63\x39\xf7\x56\x15\xc1\x95\xef\xfd\x5c\x11\xf0\xfc\x07\xf2\x0b\xd6\x46\xb1\x28\xe7\x0c\x16\x7e\x3b\x95\xab\xa5\xe7\xcf\x20\x36\x0a\x11\xec\xbe\x70\xba\x55\x10\x9d\x53\xbc\xeb\xa2\x94\xab\xc8\xf0\x0d\x46\x99\x94\xbf\x8b\x7c\x70\xc2\x24\x0c\x08\x69\x5a\x70\x3b\x0e\xdc\x4e\xac\x7b\x87\x56\xb4\xab\x46\x76\x6e\xa9\x4f\xf1\x7a\x07\x57\x2d\x18\xef\xa2\xfd\x6f\x77\xe9\xbe\xab\x7f\xb3\x7c\x37\xab\x5e\x4d\x0f\x72\x2b\x1a\xe5\x24\x70\x8b\xaa\xea\x25\x85\x5c\x68\x53\xe2\xaa\xde\x92\x02\x6f\x87\x7b\x09\x12\xaa\x13\xca\xf0\xcd\xfd\x14\xf3\x94\x0b\x33\xd0\x4f\x5c\x18\x4c\x51\x0d\xd5\x4e\x2f\xf7\x10\xf2\xc1\xe3\xb8\xd8\x9d\x23\xcb\x8c\x1d\x9f\xd3\xec\x72\x84\x64\x4d\x15\x4d\x0c\x2a\x78\xa1\x6a\xc7\x45\x6a\xdf\x7d\x72\x86\x39\x5c\xeb\x02\x55\x0f\xeb\xf3\xdd\x19\x56\x22\x59\xdf\xa4\x0f\x1f\xfb\x39\x9b\x32\x75\xed\xf5\xab\x0e\xa8\x43\x6a\x05\x20\x8b\x74\x6d\x5e\x6b\xac\xc1\x7a\x85\xb5\x06\xef\x6a\x73\x15\xeb\xac\xbd\x26\xa8\x34\xf8\x0f\x8a\xe9\x0d\xbf\x60\x5b\xa4\xd4\x28\x9f\xea\x92\x44\x2b\x8f\x6e\x3b\x36\x6e\x37\x7d\x03\xd3\x0e\x37\x77\x69\x5e\x27\x28\x6e\xf7\x35\xdd\xbe\x60\x38\xf7\x7f\x02\x00\x00\xff\xff\x01\x20\x29\x44\xff\x08\x00\x00")

func migrations7_modify_trades_tableSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations7_modify_trades_tableSql,
		"migrations/7_modify_trades_table.sql",
	)
}

func migrations7_modify_trades_tableSql() (*asset, error) {
	bytes, err := migrations7_modify_trades_tableSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/7_modify_trades_table.sql", size: 2303, mode: os.FileMode(420), modTime: time.Unix(1508869204, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"latest.sql": latestSql,
	"migrations/1_initial_schema.sql": migrations1_initial_schemaSql,
	"migrations/2_index_participants_by_toid.sql": migrations2_index_participants_by_toidSql,
	"migrations/3_use_sequence_in_history_accounts.sql": migrations3_use_sequence_in_history_accountsSql,
	"migrations/4_add_protocol_version.sql": migrations4_add_protocol_versionSql,
	"migrations/5_create_trades_table.sql": migrations5_create_trades_tableSql,
	"migrations/6_create_assets_table.sql": migrations6_create_assets_tableSql,
	"migrations/7_modify_trades_table.sql": migrations7_modify_trades_tableSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"latest.sql": &bintree{latestSql, map[string]*bintree{}},
	"migrations": &bintree{nil, map[string]*bintree{
		"1_initial_schema.sql": &bintree{migrations1_initial_schemaSql, map[string]*bintree{}},
		"2_index_participants_by_toid.sql": &bintree{migrations2_index_participants_by_toidSql, map[string]*bintree{}},
		"3_use_sequence_in_history_accounts.sql": &bintree{migrations3_use_sequence_in_history_accountsSql, map[string]*bintree{}},
		"4_add_protocol_version.sql": &bintree{migrations4_add_protocol_versionSql, map[string]*bintree{}},
		"5_create_trades_table.sql": &bintree{migrations5_create_trades_tableSql, map[string]*bintree{}},
		"6_create_assets_table.sql": &bintree{migrations6_create_assets_tableSql, map[string]*bintree{}},
		"7_modify_trades_table.sql": &bintree{migrations7_modify_trades_tableSql, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

